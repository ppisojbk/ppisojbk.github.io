<?php
/**
 * 堡垒机系统相关代码Controller文件
 *
 * 包括系统升级、备份恢复、系统配置、系统控制等
 *
 * PHP version 5
 *
 * @category  Controller
 * @package   HomeController
 * @author    Original aojian <aojian@intra.nsfocus.com>
 * @copyright 2001-2014 NSFOCUS
 * @license   NSFOCUS http://www.nsfocus.com
 * @version   SAS-H-v5.6.9
 * @link      https://SVN_URL
 */
ini_set("display_errors", "On");
ini_set("error_reporting",E_ALL);
include_once("lib/Check.php");
include_once("lib/ESD/system/status.php");
require_once 'lib/CryptHandler.php';
require_once 'lib/Utils.php';
include_once('lib/log.php');
require_once("lib/RpcService.php");
require_once("lib/nsfocus/License.php");


/**
 * 堡垒机系统请求相关的Controller类
 *
 * @author Original aojian <aojian@intra.nsfocus.com>
 */
class SystemController extends Cavy_Controller_Action
{
    public $models = 'SysBase,SysConfig,SysClass,Config,Audit,SqlList,WebmareList,HomeOnline,Download,AccessComment,App,NetInterface,VirtualMachine,TimeTime,SysAlarm,Crontab,HaVrrp';
    public $validateOn = "virtualMachine,update,updateByUsb";
    private $order_id = null;

    public function __construct()
    {
        $this->order_id = (int)$_SESSION['login.user']['id'];
    }

    public function index()
    {

    }

    /**
     * 对自动备份下来的文件进行相应的操作
     *
     * @author Original luojinrong <luojinrong@intra.nsfocus.com>
     * @return void
     */
    public function items()
    {
        $cat = $this->_params['cat'];
        $action = $this->_params['action'];
        if (isset($this->_params['name'])) {
            $name = $this->_params['name'];
            $dir = "/opt/nsfocus/sda1/ha_sync/allconfig/";
            $path = $dir . $name;
            $realPath = realpath($path);
            if ($realPath == false || strpos($realPath, $dir) === false) {
                return false;
            }
        }
        if ($cat == 'backup') {
            if ($action == 'show') {
                echo $this->SysBase->getBackupItems();
            } elseif ($action == 'download') {
                $this->Download->download_file($realPath, $name);
            } elseif ($action == 'delete') {
                $id = $this->_params['id'];
                if (unlink($realPath)) {
                    //记录日志信息
                    Cavy::getModel("Audit");
                    Audit::operationLog(_('删除编号为') . "[$id]" . _("，名称为") . "[" . htmlspecialchars($name) . "]" . _('的自动备份文件'));
                    echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>location.replace("/system/backup");</script>';
                }
            } elseif ($action == 'restore') {
                $file = array();
                $file['name'] = $name;
                $file['error'] = 0;
                $file['size'] = filesize($dir . $name);
                $file['tmp_name'] = $dir . $name;
                $type = 'backup';
                $url = '/system/backup';
                //用于区别是否为文件上传备份文件形式
                $flag = true;
                $this->restore_option($file, $type, $url, $flag);
            }
        }
    }

    /**
     * 操纵Crontab表
     *
     * @author Original luojinrong <luojinrong@intra.nsfocus.com>
     * @return integer 返回影响的行数
     */
    public function options()
    {
        $cat = $this->_params['cat'];
        if ($cat == "cancle") {
            $this->Crontab->setDisabled();
        } else {
            $time_point_id = $_POST["time_point_id"];
            $type = $this->_params['type'];
            $option = array($this->order_id, 1);
            $count = $this->Crontab->find($option);
            $params = array();
            $params['type'] = 1;
            $params['time_point_id'] = $time_point_id;
            $params['run_machine'] = 1;
            $params['enabled'] = true;
            //更新已有数据
            if ($count != 0) {
                echo $this->Crontab->update($params);
            } else {
                echo $this->Crontab->insert($params);
            }
            $this->Audit->operationLog(_('保存自动备份配置'));
        }
    }

    /**
     * 处理访问系统升级页面请求
     *
     * @return void
     */
    public function updateFrame()
    {
        $data = array();
        // 判断USB接口系统升级程序是否存在
        if ($this->usbUpgradeAlive()) {
            $data = array('usbUpgradeAlive' => 'true');
        } else {
            $data = array('usbUpgradeAlive' => 'false');
        }
        $made_version = $this->checkEngineVer();
        $ha_switch = $this->HaVrrp->getStatus();
        $data['made_version'] = $made_version;
        $data['ha_switch'] = $ha_switch;
        $this->_render($data, 'update_iframe');
    }

    /**
     * 系统升级记录列表
     *
     * @return void
     */
    public function updateLog()
    {
        $cat = $this->_params['cat'];
        if ($cat == 'items') {

            //生成token--罗真
            $token = self::create_token();
            $_SESSION['token' . __CLASS__] = $token;

            echo $this->SysBase->getUpdateLog($token);
        } elseif ($cat == 'delete') {

            $tokenVerify = isset($this->_params['token']) ? $this->_params['token'] : '';
            //传入token验证--罗真
            $sta = $this->is_token($tokenVerify);
            if (!$sta) {
                return false;
            }

            $updateLogId = trim($this->_params['id']);
            $rst = $this->SysBase->deleteUpdateLog($updateLogId);

            //生成token--罗真
            $token = self::create_token();
            $_SESSION['token' . __CLASS__] = $token;

            echo $this->SysBase->getUpdateLog($token);//传入参数token--罗真
        } else {
            $this->_render(null, 'updateLog/index');
        }
    }

    /**
     * 判断当前系统引擎版本号是否为定制版本
     * 返回true表示当前版本为定制版本
     *
     * @return boolean
     */
    public function checkEngineVer()
    {
        $listManage = Cavy::getModel("ListManage");
        $pattern = "/^V[5-9].[0-9]R[0-9]{2}F[0-9]{2}(SP[0-9]{2})?$/";
        $engine_version = $listManage->getEngine();

        if (!preg_match($pattern, $engine_version)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * 系统升级处理请
     *
     * @return void
     */
    public function update()
    {
        if ($this->_hasError()) {
            $this->_render(null, 'fail');
            return false;
        }

        include_once("lib/nsfocus/License.php");
        $lic = new License("/opt/nsfocus/etc/eoi.agent.lic");
        /*
        $lic = $lic->info();
        if (!$lic["update"]) {
            return;
        }
        */

        $ha_sync_config = $this->HaVrrp->getStatus();
        if ($_FILES['file']) {
            if ($ha_sync_config == 'on') {
                $msg = _('当前已启用HA功能，不能进行系统升级');
                echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("' . $msg . '");window.parent.location.replace("/system/updateFrame");</script>';
                return;
            }

            $info = array("patch" => _("导入系统升级文件"),
                "urldb" => _("导入URL分类库"),
                "policy" => _("导入策略文件"),
                "rulesys" => _("导入系统规则库文件"),
                "agent" => _("导入引擎升级文件"),
                "av" => _("导入病毒库升级文件"),
                "email" => _("导入垃圾邮件库升级文件"),
                "webmal" => _("导入恶意站点库文件"));

            $type = $_REQUEST['file_type'];
            $comment = trim($this->_params['comment']);
            $this->Audit->operationLog($info[$type], null, 3);
            $obj = "SysBase";
            $info = $this->$obj->upload($type, NULL, FALSE, $comment);
            if (!empty($info)) {
                echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("' . $info . '");window.parent.location.replace("/system/updateFrame");</script>';
            }
        } else {
            $id = $this->_params['id'];
            $made_version = $this->checkEngineVer();
            $this->_render(array('id' => $id, 'made_version' => $made_version, 'ha_switch' => $ha_sync_config));
        }
    }

    /**
     * 立即同步时间服务器
     *
     * @return void;
     */
    public function updateNtp()
    {
        $ntp_server = str_replace(' ', '', $this->_params['ntp_server']);
        if (is_ip($ntp_server)) {
            exec("/bin/super bzyntpdate " . $ntp_server, $output, $return_var);
        }

        $out = array('code' => -1, 'msg' => _("时间同步失败"));

        if ($return_var === 0) {
            $msg = _('同步时间服务器') . "[$ntp_server]" . _("成功");
            $out['code'] = 0;
            $out['msg'] = _("时间同步成功");
        } else {
            $msg = _('同步时间服务器') . "[$ntp_server]" . _("失败");
        }
        $this->Audit->operationLog($msg);

        echo json_encode($out);
    }

    /**
     * 更新DNAT配置
     *
     * @return void;
     */
    public function updateDnat()
    {
        $token = isset($this->_params['token']) ? $this->_params['token'] : '';
        //传入token验证--罗真
        $sta = $this->is_token($token);
        if (!$sta) {
            return false;
        }

        $dnat = $this->_params['dnat'];
        $dnat_address = trim($this->_params['dnat_address']);
        if (!is_ip($dnat_address)) {
            $output = array(
                "result" => "error",
                "context" => array(
                    "actionErrors" => array("保存配置失败")
                )
            );
            echo "(" . json_encode($output) . ")";
            return;
        }
        $result = $this->SysConfig->setDnat($dnat, $dnat_address);

        if ($result) {
            $output = array(
                "result" => "success",
                "context" => array("msg" => "保存配置成功")
            );
        } else {
            $output = array(
                "result" => "error",
                "context" => array(
                    "actionErrors" => array("保存配置失败")
                )
            );
        }

        echo "(" . json_encode($output) . ")";
    }

    /**
     * 更新运维端口配置
     *
     * @return void;
     */
    public function updatePort()
    {
        $token = isset($this->_params['token']) ? $this->_params['token'] : '';
        //传入token验证--罗真
        $sta = $this->is_token($token);
        if (!$sta) {
            return false;
        }

        $rdp_port = $this->_params['rdp_port'];
        $vnc_port = $this->_params['vnc_port'];
        $sshd_port = $this->_params['sshd_port'];
//        $network_only = $this->_params['network_only'];
        $rdp_type = $this->_params['rdp_type'];
        $flag = trim($this->_params['flag']);

        if (!is_port($rdp_port) || !is_port($vnc_port) || !is_port($sshd_port)) {
            $output = array(
                "result" => "error",
                "context" => array(
                    "actionErrors" => array("保存配置失败,含有非法参数")
                )
            );
            echo "(" . json_encode($output) . ")";
            return false;
        }
        $result = Cavy::getModel("SysPort")->setPort($rdp_port, $vnc_port, $sshd_port, $rdp_type, $flag);
        if ($result) {
            $output = array(
                "result" => "success",
                "context" => array("msg" => "保存配置成功")
            );
        } else {
            $output = array(
                "result" => "error",
                "context" => array(
                    "actionErrors" => array("保存配置失败")
                )
            );
        }

        echo "(" . json_encode($output) . ")";
    }

    /**
     * 应用运维端口配置并断开在线会话
     *
     * @return void;
     */
    public function applyPort()
    {
        $flag = trim($this->_params['flag']);
        $flag = ($flag == 'true') ? true : false;
        $apply_result = Cavy::getModel("SysPort")->applyPort($flag);

        if ($apply_result) {
            if ($flag) {
                $out = array("msg" => _("断开在线会话成功"));
            } else {
                $out = array("msg" => _("保存配置成功"));
            }
        } else {
            if ($flag) {
                $out = array("msg" => _("断开开在线会话失败"));
            } else {
                $out = array("msg" => _("保存配置失败"));
            }
        }

        echo json_encode($out);
    }

    /**
     * 判断运维端口是否已被使用
     *
     * @return void;
     */
    public function isPortUsed()
    {
        $cat = trim($this->_params['cat']);

        if ($cat == 'rdpproxy') {
            $port = trim($this->_params['rdp_port']);
        } elseif ($cat == 'vncproxy') {
            $port = trim($this->_params['vnc_port']);
        } elseif ($cat == 'sshd') {
            $port = trim($this->_params['sshd_port']);
        } else {
            return false;
        }

        $result = Cavy::getModel("SysPort")->checkPort($port, $cat);

        echo !$result ? 'true' : 'false';
    }

    /**
     * 挂载USB接口，读取U盘中的系统升级文件
     *
     * @return void
     */
    public function mountUsb()
    {
        $flag = $this->_params['flag'];
        if ($flag == '1') {
            // mount u盘
            $option = "-l --character-set UTF-8";
        } elseif ($flag == '0') {
            // dismount u盘
            $option = "-U";
        } else {
            return false;
        }
        $result = array();
        $cmd = "/bin/super bzypython /opt/nsfocus/bin/usb_upgrade.py $option";
        exec($cmd, $output, $retval);

        $result['status'] = $retval;
        $result['result'] = $output;
        $result['flag'] = intval($flag);
        $result = json_encode($result);
        echo $result;
    }

    /**
     * 判断USB接口升级堡垒机系统程序是否存在
     *
     * @return boolean;
     */
    private function usbUpgradeAlive()
    {
        $cmd = "ps -ef |grep -v grep |grep /opt/nsfocus/bin/usb_upgrade.py|wc -l";
        exec($cmd, $output);
        $output = intval($output[0]);

        if ($output > 0) {
            return true;
        }
        return false;
    }

    /**
     * 通过U盘插入USB接口，升级堡垒机系统
     *
     * @return void
     */
    public function updateByUsb()
    {
        if ($this->_hasError()) {
            $this->_render(null, 'fail');
            return false;
        }
        // USB接口进程存在，则不进行升级
        if ($this->usbUpgradeAlive()) {
            $output = array('status' => '-1',
                'error_info' => _("USB接口升级系统正在运行中"));
            echo json_encode($output);
            return false;
        }
        // 判断系统是否开启HA
        $ha_sync_config = $this->HaVrrp->getStatus();
        if ($ha_sync_config == 'on') {
            $msg = _('当前已启用HA功能，不能进行系统升级');
            $output = array('status' => '-1', 'error_info' => $msg);
            echo json_encode($output);
            return false;
        }

        $file_path = $this->_params['sys_file'];
        $comment = trim($this->_params['comment']);
        $file_path = escapeshellarg($file_path);
        $comment = escapeshellarg($comment);
        $option = "-u {$file_path} --character-set UTF-8";
        if ($comment != "") {
            $option .= " --comment $comment ";
        }
        $result = array();

        // USB接口升级进度状态临时文件
        $file_process = "/tmp/usb_upgrade";
        if (file_exists($file_process)) {
            exec("/bin/super bzyrm {$file_process}");
        }
        exec("/bin/super bzytouch {$file_process}");
        // 启动USB接口升级程序
        $cmd = "/bin/super bzypython /opt/nsfocus/bin/usb_upgrade.py $option > /dev/null 2>&1 &";

        exec($cmd, $output, $retval);

        $version_info = version_list();
        $audit_msg = _('执行USB接口升级系统，');
        $audit_msg .= "固件：" . $version_info['固件'] . "，引擎：" . $version_info['引擎'];
        $this->Audit->operationLog($audit_msg, null, 3);

        $output = array('status' => '1');
        echo json_encode($output);
    }

    /**
     * 获取通过U盘插入USB接口，进行堡垒机系统升级的进度
     *
     * @return void
     */
    public function getUsbProgress()
    {
        $output = array();
        // USB接口升级进度状态临时文件
        $file_process = "/tmp/usb_upgrade";
        $audit_msg = '';

        if ($this->usbUpgradeAlive()) {
            if (file_exists($file_process)) {
                $file_rows = file($file_process);
                $status = trim($file_rows[0]);
                $output['status'] = $status;

                if ($status == '0') {
                    $output['percent'] = trim($file_rows[1]);

                    if ($output['percent'] == '100') {
                        $version_info = version_list();
                        $audit_msg = _('USB接口升级系统成功，');
                        $audit_msg .= "固件：" . $version_info['固件'] . "，引擎：" . $version_info['引擎'];
                    }
                } else {
                    $output['error'] = trim($file_rows[1]);
                    $audit_msg = _('USB接口升级系统失败');
                }
            } else {
                $audit_msg = _('USB接口升级系统失败');
                $output['error'] = '未找到系统升级状态文件';
                $output['status'] = '-1';
            }
        } else {
            if (file_exists($file_process)) {
                $file_rows = file($file_process);
                $status = trim($file_rows[0]);
                $percent = trim($file_rows[1]);
                $output['status'] = $status;

                if ($status == '0' && $percent == '100') {
                    $version_info = version_list();
                    $audit_msg = _('USB接口升级系统成功，');
                    $audit_msg .= "固件：" . $version_info['固件'] . "，引擎：" . $version_info['引擎'];
                    $output['percent'] = $percent;
                } else {
                    $audit_msg = _('USB接口升级系统失败');
                    $output['error'] = $file_rows[1];
                }
            } else {
                $audit_msg = _('USB接口升级系统失败');
                $output['error'] = '未找到系统升级状态文件';
                $output['status'] = '-1';
            }
        }

        if ($audit_msg != '') {
            $this->Audit->operationLog($audit_msg, null, 3);
        }

        if (file_exists("/tmp/REBOOT_SYSTEM")) {
            $output['reboot'] = 'true';
        } else {
            $output['reboot'] = 'false';
        }

        $reult = json_encode($output);
        echo $reult;
    }

    /**
     * 本地系统升级，获取升级进度
     *
     * @return void
     */
    public function getprogress()
    {
        if (isset($this->_params['progress_key'])) {
            $progress_key = $this->_params['progress_key'];
            $status = apc_fetch('upload_' . $progress_key);
            if ($status == false) {
                echo 'false';
            } else {
                $percent = intval($status['current'] / $status['total'] * 100);
                echo $percent;
            }
        }
    }

    /**
     * 系统自动升级处理函数 [历史遗留]
     *
     * @return void
     */
    public function autoUpdate()
    {
        include_once("lib/nsfocus/License.php");
        $lic = new License("/opt/nsfocus/etc/eoi.agent.lic");
        /*
        $lic = $lic->info();
        if (!$lic["update"]) {
            return;
        }
        */

        $cat = $this->_params['cat'];
        if ($cat == "") {
            $option = array('auto_update' => $this->SysConfig->getAutoUpdate());
            $this->_render($option);
        } else {
            $item = array('enabled' => $this->_params['enabled'],
                'url' => $this->_params['timeat_url'],
                'week' => $this->_params['week'],
                'time' => $this->_params['time']);

            if ($item['enabled'] == 'true') {
                $this->Audit->operationLog(_('启用自动升级'));
            } else {
                $this->Audit->operationLog(_('禁用自动升级'));
            }
            $this->SysConfig->setAutoUpdate($item);
            system('/bin/super killall -9 updater.py');
            echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>location.replace("/system/autoUpdate");</script>';
        }
    }

    /**
     * 系统自动升级处理函数 [历史遗留]
     *
     * @return void
     */
    public function autohandupdate()
    {
        system('/bin/super killall -35 updater.py');
        $this->Audit->handupdateLog(_('立即升级'));
        echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>location.replace("/system/autoUpdate");</script>';
    }

    /**
     * 系统手动升级处理函数 [历史遗留]
     *
     * @return void
     */
    public function startUpdate()
    {
        system('/bin/super killall -35 updater.py');
        $this->Audit->operationLog(_('手动升级'), null, 3);
        echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>location.replace("/system/update");</script>';
    }

    /**
     * 专业参数显示页面跳转
     *
     * @return void
     */
    public function profParams()
    {
        if ($_SESSION['login.user']['roles'][0] != 'audit') {
            echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body style="color: red">您没有权限访问该页面！</body>';
            return false;
        }
        $cat = $this->_params['cat'];
        $owner = $_SESSION['login.user']['id'];
        if (intval($this->_params['max_log_file']) > 10) {
            return false;
        }
        $paramSet = Cavy::getModel("ParamSet");
        if ($cat == "set") {
            $vali_data = array(
                'max_log_file' => trim($this->_params['max_log_file']),
                'bg_red' => trim($this->_params['bg_red']),
                'bg_green' => trim($this->_params['bg_green']),
                'bg_blue' => trim($this->_params['bg_blue']),
                'fg_red' => trim($this->_params['fg_red']),
                'fg_green' => trim($this->_params['fg_green']),
                'fg_blue' => trim($this->_params['fg_blue']),
                'window_height' => trim($this->_params['window_height'])
            );
            foreach ($vali_data as $k => $v) {
                if (!is_numeric($v)) {
                    return false;
                }
            }
            $result = $paramSet->setAuditParams($this->_params, $owner);
            if ($this->_params['dbaudit_change'] == 'true') {
                $this->VirtualMachine->updateDatabaseConf();
            }
        }
        $auditParams = $paramSet->getAuditParams();
        $winTitle = $this->Config->findAllByOwner($owner);
        $data = array('audit' => $auditParams, 'winTitle' => $winTitle);
        $this->_render($data, 'profParams');
    }

    /**
     * 处理配置文件备份下载请求
     *
     * @return void;
     */
    public function backup()
    {
        $cat = $this->_params['cat'];
        if ($cat == "") {
            //获取当前用户所有的时间点对象
            $option['time_point'] = $this->TimeTime->getTimeObj();
            //$option['time_point'] = Cavy::getModel("ListManage")->get_object_list(array('time_point'), true, 1, false, 0, false, false, true);
            $result = array();
            $result = $this->Crontab->getCrontabObj();
            $option['enabled'] = $result[0]['enabled'];
            $option['time_point_id'] = $result[0]['time_point_id'];
            $this->_render($option, 'backup');
        } else {
            $ha_sync_config = $this->HaVrrp->getStatus();
            /*if ($ha_sync_config == 'on') {
                $url = '/system/backup';
                $msg = _('堡垒机管理员已启用HA功能，不能进行备份操作');
                echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("' . $msg . '");location.replace("'.$url.'");</script>';
                return;
            }*/
            $info = array('config' => _('下载引擎参数文件'),
                'media' => _('下载流媒体服务器列表文件'),
                'backup' => _('下载备份配置文件'),
                'auth' => _('下载本地认证文件'),
                'ipsecvpn' => _('备份IPSECVPN配置文件'),
                'ruleuser' => _('下载自定义规则'));

            $msg = $info[$cat];
            $type = $this->_params['type'];
            if (isset($type) && $type == 'auto') {//自动备份全部配置文件
                $this->Audit->operationLog($msg, null, 3);
            } else {//手动备份全部配置文件
                $this->Audit->operationLog($msg);
            }
            $obj = "SysBase";
            $this->$obj->download($cat);
        }
    }

    /**
     * 发起配置文件恢复请求
     *
     * @return void;
     */
    public function restore()
    {
        $file = $_FILES['file'];
        $type = $_REQUEST['file_type'];
        $url = '/system/restore';
        //用于区别是否为文件上传备份文件形式
        $flag = false;
        $this->restore_option($file, $type, $url, $flag);

    }

    /**
     * 处理配置文件恢复请求
     *
     * @return void;
     */
    public function restore_option($file, $type, $url, $flag)
    {
        if ($file) {
            $ha_sync_config = $this->HaVrrp->getStatus();
            if ($ha_sync_config == 'on') {
                $msg = _('堡垒机管理员已启用HA功能，不能恢复系统配置');
                echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("' . $msg . '");location.replace("' . $url . '");</script>';
                return;
            }
            //恢复的时候数据库引擎开启会导致class一直占用数据库连接，导致恢复导入sql动作失败，
            //so恢复的时候先让用户关闭数据库审计功能，即删除该文件
            if (file_exists('/opt/nsfocus/etc/databaseaudit.conf')) {
                system('/bin/super bzyrm /opt/nsfocus/etc/databaseaudit.conf');
            }
            $info = array('config' => _('导入引擎参数文件'),
                'media' => _('导入流媒体服务器列表文件'),
                'backup' => _('恢复全部配置备份文件'),
                'backup566' => _('恢复跨平台配置备份文件'),
                'auth' => _('导入本地认证文件'),
                'ipsecvpn' => _('导入IPSECVPN配置文件'),
                'ruleuser' => _('导入用户自定义规则库文件'));
            $logmsg = $info[$type];
            $obj = "SysBase";
            $info = $this->$obj->upload($type, $file, $flag);
            if (strpos($info, _("成功"))) {
                $logmsg .= _("成功");
            } else {
                $logmsg .= _("失败");
            }
            $this->Audit->operationLog($logmsg);
            echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("' . $info . '");location.replace("' . $url . '");</script>';
        } else {
            $has_app_platform = Utils::hasAppPlatform();
            $vm_count = 0;
            if ($has_app_platform) {
                $vm_count = Cavy::getModel('VirtualMachine')->getVMCount();
            }
            $this->_render(array('has_app_platform' => $has_app_platform, 'vm_count' => $vm_count));
        }
    }

    /**
     * 处理系统配置的各类请求，包括引擎、参数配置等
     *
     * @return void;
     */
    public function setting()
    {
        $cat = $this->_params['cat'];
        if ($cat == 'execute') {
            $target = $this->_params['target'];
            $regex_ip = "/^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/";
            $regex_text = "/^[^<>\'\"]*$/";
            $regex_digital = "/^\d+$/";

            switch ($target) {
                case 'engine':

                    $token = isset($this->_params['token']) ? $this->_params['token'] : '';
                    //传入token验证--罗真
                    $sta = $this->is_token($token);
                    if (!$sta) {
                        return false;
                    }

                    $msg = _('修改引擎配置(注:引擎将会自动重启)');
                    $this->Audit->operationLog($msg);
                    unset($msg);

                    if (preg_match($regex_text, $_REQUEST['device_name']) == 1
                        && mb_strlen($_REQUEST['device_name'], "utf8") <= 30
                        && preg_match($regex_text, $_REQUEST['device_addr']) == 1
                        && mb_strlen($_REQUEST['device_addr'], "utf8") <= 30
                        && ($_REQUEST['ntp'] == "true" || $_REQUEST['ntp'] == "false")
                        && preg_match($regex_ip, str_replace(' ', '', $_REQUEST['ntp_ip'])) == 1
                        && preg_match($regex_digital, $_REQUEST['ntp_interval']) == 1) {

                        $obj = "SysBase";
                        $this->$obj->engine($_REQUEST);

                        $obj = "SysConfig";
                        $this->$obj->setsysteminfo($_REQUEST['device_name'], $_REQUEST['device_addr']);

                        $this->$obj->setntp($_REQUEST['ntp'], $_REQUEST['ntp_interval'], str_replace(' ', '', $_REQUEST['ntp_ip']));
                        //other operate
                        system("/bin/super killall -9 webtoid.py > /dev/null 2>&1");

                        $output = array(
                            "result" => "success",
                            "context" => array("msg" => "保存配置成功")
                        );
                    } else {
                        $output = array(
                            "result" => "error",
                            "context" => array(
                                "actionErrors" => array("保存配置失败")
                            )
                        );
                    }

                    echo "(" . json_encode($output) . ")";

                    break;
                case 'console':
                    $msg = _('修改安全中心配置(注:引擎将会自动重启)');
                    $this->Audit->operationLog($msg);
                    unset($msg);
                    //first check the post data
                    $local = $_REQUEST['local'];
                    $master = $_REQUEST['master'];
                    $remote1 = $_REQUEST['remote1'];
                    $remote2 = $_REQUEST['remote2'];
                    $remote3 = $_REQUEST['remote3'];
                    $remote4 = $_REQUEST['remote4'];
                    $remotetoidport1 = $_REQUEST['remotetoidport1'];
                    $remotetoidport2 = $_REQUEST['remotetoidport2'];
                    $remotetoidport3 = $_REQUEST['remotetoidport3'];
                    $remotetoidport4 = $_REQUEST['remotetoidport4'];
                    $syslog = $_REQUEST['syslog'];

                    if ((preg_match($regex_ip, $local) == 1)
                        && (preg_match($regex_ip, $master) == 1)
                        && (preg_match($regex_ip, $remote1) == 1)
                        && (preg_match($regex_ip, $remote2) == 1)
                        && (preg_match($regex_ip, $remote3) == 1)
                        && (preg_match($regex_ip, $remote4) == 1)
                        && (preg_match($regex_ip, $syslog) == 1)
                        && ($remotetoidport1 < 65535 && $remotetoidport1 > 0)
                        && ($remotetoidport2 < 65535 && $remotetoidport2 > 0)
                        && ($remotetoidport3 < 65535 && $remotetoidport3 > 0)
                        && ($remotetoidport4 < 65535 && $remotetoidport4 > 0)) {

                        $obj = "SysClass";
                        $this->$obj->console($_REQUEST);
                        $cmd = "/bin/super bzychange_ip_cmos $local $master $remote1 $remote2 $remote3 $remote4 > /dev/null &";
                        exec($cmd);
                    }
                    system("/bin/super killall -9 toid > /dev/null 2>&1");
                    system("/bin/super killall -9 webtoid.py > /dev/null 2>&1");
                    $this->_redirect('setting/cat/console');
                    break;
                case 'auth':
                    $obj = "SysConfig";
                    //检测所选数据
                    if (!$this->checkAuthConfig($_REQUEST["default"])) {
                        echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("请选择正确的认证服务器");location.replace("/system/setting/cat/auth");</script>';
                        return false;
                    }
                    if ($_SESSION['login.user']['roles'][0] == 'admin') {
                        $this->$obj->auth($_REQUEST);
                    } elseif ($_SESSION['login.user']['roles'][0] == 'audit') {
                        $this->$obj->setAuthByAudit($_REQUEST);
                    }
                    $this->_redirect('setting/cat/auth');
                    break;
                case 'authParam':
                    $obj = "SysConfig";
                    if ($this->validateParam($target, $this->_params)) {
                        if ($_SESSION['login.user']['roles'][0] == 'admin') {
                            $this->$obj->authParams($_REQUEST);
                        } elseif ($_SESSION['login.user']['roles'][0] == 'audit') {
                            $this->$obj->setAuthParamByAudit($_REQUEST);
                        }
                    }
                    $this->_redirect('setting/cat/auth');
                    break;
                case 'acl':
                    $obj = "SysConfig";
                    $aclNetwork = $this->_params['acl_network'];
                    $aclNetwork = str_replace(' ', '', $aclNetwork);
                    $aclNetwork = str_replace('/', '', $aclNetwork);
                    if (!is_valid_text2($aclNetwork)) {
                        $this->_redirect('setting/cat/auth');
                        return false;
                    }
                    $this->$obj->setAclConfig($this->_params);
                    $msg = _('更新访问权限控制-允许登录网络');
                    $this->Audit->operationLog($msg);

                    $this->_redirect('setting/cat/auth');
                    break;
                case 'bypass':
                    $msg = _('设置外置Bypass');
                    $this->Audit->operationLog($msg);
                    unset($msg);
                    $obj = "SysConfig";
                    $this->$obj->setbypass($_REQUEST);
                    $this->_redirect('setting/cat/bypass');
                    break;
                default:
                    break;
            }
        } else {
            if ($cat == 'auth') {
                $data = array();
                if ($_SESSION['login.user']['roles'][0] == 'admin') {
                    $authConfig = $this->SysConfig->getAuth();
                    $authParams = $this->SysConfig->getAuthParams();
                } elseif ($_SESSION['login.user']['roles'][0] == 'audit') {
                    $authConfig = $this->SysConfig->getAuthByAudit();
                    $authParams = $this->SysConfig->getAuthParamByAudit();
                }
                $data = array_merge($authConfig, $authParams);
            } elseif ($cat == 'engine') {
                $sys_info = $this->SysConfig->getsysteminfo();
                $ntp_info = $this->SysConfig->getntp();
                $dnat_addr = $this->SysConfig->getDnatConfig();
                $dnat_addr = (!$dnat_addr) ? '' : $dnat_addr;
                $port_arr = Cavy::getModel("SysPort")->getPort();
                exec("/bin/super bzypython /opt/nsfocus/bin/rdpproxy.py get_rdptype", $output, $retval);

                //生成token--罗真
                $token = self::create_token();
                $_SESSION['token' . __CLASS__] = $token;

                $data = array(
                    'remote_assi' => $sys_info['remote_assi'],
                    'ping' => $sys_info['ping'],
                    'device_name' => $sys_info['device_name'],
                    'device_addr' => $sys_info['device_addr'],
                    'ntp' => $ntp_info['enabled'],
                    'ntp_ip' => $ntp_info['ip'],
                    'ntp_interval' => $ntp_info['interval'],
                    'rdp_port' => $port_arr['rdpproxy'],
                    'vnc_port' => $port_arr['vncproxy'],
                    'sshd_port' => $port_arr['sshd'],
//                    'remote_network_only'=>$port_arr['remote_network_only'],
                    'rdp_type' => end($output),
                    'dnat_addr' => $dnat_addr,
                    'token' => $token
                );
            }
            $this->_render($data, 'setting/' . $cat);
        }
    }

    /**
     * 解析系统证书
     *
     * @return void
     */
    public function license()
    {
        include_once("lib/nsfocus/License.php");
        $lic = new License("/opt/nsfocus/etc/eoi.agent.lic");
        $is_virtual_platform = Utils::isVmware();
        $data = [];
        $data['is_virtual'] = $is_virtual_platform;
        $data['lic'] = $lic->info();
        $this->_render($data);
    }

    /**
     * 处理重启引擎或重启系统的请求
     *
     * @return void
     */
    public function device()
    {
        if (isset($this->_params['do']) && $_SESSION['csrf_token'] == $this->_params['csrf_token']) {
            $obj = "SysBase";
            switch ($this->_params['do']) {
                case 'restartengine' :
                    //$this->Audit->operationLog(_("重启引擎"));
                    $this->Audit->restartclassLog(_("重启引擎"));
                    $this->$obj->restartengine();
                    break;
                case 'restartdevice' :
                    //$this->Audit->operationLog(_("重启系统"));
                    $this->Audit->restartdeviceLog(_("重启系统"));
                    $this->$obj->restartdevice();
                    break;
                default :
                    break;
            }
        }
        //写入csrf_token
        $_SESSION['csrf_token'] = md5(rand() . time());
        $this->_render(null);
    }

    /**
     * 关键字文件处理请
     *
     * @return void
     */
    public function keyfile()
    {
        $cat = $this->_params['cat'];
        $file = urldecode($this->_params['file']);
        switch ($cat) {
            case 'edit' :
                $this->Audit->operationLog(_("编辑关键字文件"));
                $this->_render($file, 'setting/keyfile');
                break;
            case 'delete' :
                if (!is_name($file))
                    return;
                $this->Audit->operationLog(_("删除关键字文件"));
                system("/bin/super bzyrm '/opt/nsfocus/rule/keylist/" . $file . ".list'");
                system("/bin/super bzysync sync > /dev/null 2>&1");
                $this->_render(null, 'setting/keyword');
                break;
            case 'upload' :
                $file = $_FILES['key_file'];
                if (!ereg("^[0-9a-zA-Z,.@\x80-\xff\-]+\.list$", $file['name']))
                    return;
                if ($file['error'] == 0) {
                    if (($file['size'] > 1024 * 1024 * 10) || ($file['size'] == 0)) {
                        $info = _("对不起，你上传的文件大小不正确");
                    } else if (!ereg("\.list$", $file['name'])) {
                        $info = _("不是合法的关键字文件（*.list）");
                    } else if (!move_uploaded_file($file['tmp_name'], "/tmp/" . $file['name'])) {
                        $info = _("复制文件失败");
                    } else {
                        system("/bin/super bzymv /tmp/{$file['name']} /opt/nsfocus/rule/keylist/{$file['name']} > /dev/null 2>&1");
                        system("/bin/super bzysync sync > /dev/null 2>&1");
                        $info = _("更新成功");
                    }
                } else if ($file['error'] == 1 || $file['error'] == 2) {
                    $info = _('对不起，你上传的文件大小不正确');
                } else if ($file['error'] == 3) {
                    $info = _('文件传输错误');
                } else if ($file['error'] == 4) {
                    $info = _('文件未被上传');
                } else {
                    $info = _('文件传输错误，错误码：') . $file['error'];
                }
                $this->Audit->operationLog(_("上传关键字文件") . $info);
                echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("' . $info . '");location.replace("/system/setting/cat/keyword");</script>';
                break;
            case 'update' :
                if (!is_name($_REQUEST['filename']))
                    return;
                $this->Audit->operationLog(_("编辑关键字文件"));
                fwrite(fopen('/tmp/' . $_REQUEST['filename'] . '.list', 'w'), $_REQUEST['keys']);
                system("/bin/super bzymv /tmp/{$_REQUEST['filename']}.list /opt/nsfocus/rule/keylist/{$_REQUEST['filename']}.list > /dev/null 2>&1");
                system("/bin/super bzysync sync > /dev/null 2>&1");
                $this->_render(null, 'setting/keyword');
                break;
            default :
                break;
        }
    }

    /**
     * 处理配置邮件服务器请求
     *
     * @return void
     */
    public function smtp()
    {
        $cat = $this->_params['cat'];
        if ($cat == 'update') {
            if ($this->_hasError()) {
                return false;
            }
            session_write_close(); // 防止因为session锁，导致请求阻塞
            $return = $this->SysConfig->setSmtp($this->_params);
            if ($this->_params['test_mail_if'] == "true") {
                echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("' . $return . '");</script>';
            }
            $this->Audit->operationLog(_("更新系统邮件配置"));
        }
        $item = $this->SysConfig->getSmtp();
        $this->_render($item, 'setting/smtp');
    }


    public function validateOnSmtp($validator)
    {
        $arr = $this->_params;
        $str = implode('.', $arr);
        if (!empty($arr)) {
            $str = implode('.', $arr);
            $str = str_replace('/', '', $str);
            if (!is_valid_text2($str)) {
                $validator->addFieldError('field', _('输入含有非法字符'));
            }
        }
    }

    /**
     * 调用python脚本，获取FTP服务器目录信息
     *
     * @return boolean|string
     */
    public function getJsonTree($logsrc)
    {
        $file_path = array();
        session_write_close(); // 防止因为session锁，导致请求阻塞
        if (intval($logsrc) == 1) {
            exec("/bin/super bzypython /opt/nsfocus/bin/logcenter/ftpdir.py", $lists, $retval);
        } elseif (intval($logsrc) == 2) {
            exec("/bin/super bzypython -W ignore /opt/nsfocus/bin/logcenter/ossdir.py", $lists, $retval);
        }

        if ($retval != 0) {
            return false;
        }

        foreach ($lists as $list) {
            if ($list == 1 || $list == '1') {
                continue;
            }
            $file_path[] = $list;
        }

        $dict_tree = array();
        $dict_tree = $this->makeTree($file_path);
        return Cavy_Json::encode($dict_tree, Cavy_Json::TYPE_OBJECT);
    }

    /**
     * 根据文件路径生成森林树结构
     *
     * @param $paths 文件路径数组
     *
     * @return array 树结构数组
     */
    private function makeTree($paths)
    {
        $tree = array();

        foreach ($paths as $path) {
            $dirs = explode("/", $path);
            $parent = &$tree;
            $size = count($dirs);
            $last_index = $size - 1;
            for ($index = 0; $index < $size; $index++) {
                $dir = $dirs[$index];
                if (strlen($dir) == 0) {
                    continue;
                }

                $pindex = 0;
                $psize = count($parent);
                $has_dir = false;
                for ($pindex = 0; $pindex < $psize; $pindex++) {
                    $p = $parent[$pindex];
                    if (array_key_exists('text', $p) && $p['text'] == $dir) {
                        $has_dir = true;
                        break;
                    }
                }

                if ($index == $last_index) {
                    $tmp = array('id' => $path, 'text' => $dir);
                    array_push($parent, $tmp);
                } else if ($has_dir) {
                    $parent = &$parent[$pindex]['children'];
                } else if (!$has_dir) {
                    $tmp = array('id' => '0', 'text' => $dir, 'state' => 'closed', 'children' => array());
                    array_push($parent, $tmp);
                    $parent = &$parent[$pindex]['children'];
                }
            }
        }
        return $tree;
    }

    /**
     * 处理FTP服务器备份日志等相关请求
     *
     * @return void|boolean
     */
    public function log()
    {
        session_write_close();
        $cat = $this->_params['cat'];
        if ($_SESSION['login.user']['roles'][0] != "audit") {
            echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body style="color: red">你没有权限访问该页面！</body>';
            return false;
        }

        if ($cat == "backup") {
            $time1 = $this->_params['time1'];
            $time2 = $this->_params['time2'];
            $clear_up_flag = $this->_params['clearup'];
            $logdist = $this->_params["logdist"];
            if (!empty($time1) && !empty($time2) && !empty($clear_up_flag) && !empty($logdist) && $time1 <= $time2) {
                $backup_date_str = $logdist . "," . str_replace("-", "", $time1) . ',' . str_replace("-", "", $time2) . ',' . $clear_up_flag;
                file_put_contents('/tmp/sas_backuplog', $backup_date_str);
                $this->Audit->operationLog(_("日志信息手动备份,选择了备份") . $time1 . _('至') . $time2 . _('的日志'));
            }
        } elseif ($cat == "logsize") {
            $sub = $this->_params['sub']; //磁盘清理根据日志类型和危险级别计算日志大小
            $online_ids = array();
            $online_ids = $this->HomeOnline->get_items_id_array();
            $time1 = str_replace("-", "", $this->_params['time1']);
            $time2 = str_replace("-", "", $this->_params['time2']);
            // 防止命令行注入
            $time1 = escapeshellarg($time1);
            $time2 = escapeshellarg($time2);

            $rs_tmp = array();
            $flag = -1;
            if (!empty($sub)) { //传日志类型和危险级别参数
                $log_type = $this->_params['log_type'];
                $danger_level = $this->_params['danger_level'];
                // 防止命令行注入
                $log_type = escapeshellarg($log_type);
                $danger_level = escapeshellarg($danger_level);
                exec("super bzypython /opt/nsfocus/bin/logcenter/CountLogSize.py $time1 $time2 $log_type $danger_level", $rs_tmp, $flag);
            } else {
                exec("super bzypython /opt/nsfocus/bin/logcenter/CountLogSize.py $time1 $time2", $rs_tmp, $flag);
            }
            if (empty($online_ids)) {
                echo 'noOnline,' . $rs_tmp[0];
            } else {
                echo 'hasOnline,' . $rs_tmp[0];
            }
        } elseif ($cat == "disconnect") { //备份的时候断开所有的在线会话
            $online_ids = array();
            $online_ids = $this->HomeOnline->get_items_id_array();
            if (!empty($online_ids)) {
                foreach ($online_ids as $oid) {
                    $this->HomeOnline->disconnect($oid);
                }
            }
        } elseif ($cat == "cleanup") {
            $db = new PDO(Cavy::$ENV['dsn']);
            $sql = "delete from session_log";
            $db->query($sql);
            $sql = "delete from system_log";
            $db->query($sql);
            exec("super bzyrm -rf /opt/nsfocus/sda1/restore/*");
            $this->Audit->operationLog(_("清空日志信息"));
        } elseif ($cat == "status") {

            echo $this->checkBackupStatus();
        } elseif ($cat == "list") {
            $logsrc = $this->_params['logsrc'];
            $lists = $this->getJsonTree($logsrc);
            $data = array("data" => $lists, "logsrc" => $logsrc);
            $this->_render($data, "log/list");
        } elseif ($cat == "ftprestore") {

            $logsrc = $this->_params["logsrc"];

            $dom = new DOMDocument();
            $dom->load("/opt/nsfocus/etc/sas_f_config.xml");
            $ftpserver = $dom->getElementsByTagName("ftpserver")->item(0);
            $host = $ftpserver->getAttribute('host');
            $port = $ftpserver->getAttribute('port');
            $user = addslashes($ftpserver->getAttribute('user'));
            $pass = addslashes($ftpserver->getAttribute('pass'));
            $path = $ftpserver->getAttribute('path');
            $filename = urldecode($this->_params['filename']);
            // add new code
            $files = array();
            $file_array = explode(",", $filename);
            $record_tmp = array();
            $record = array('flag' => 0, 'count' => 0, 'backup_file' => array());
            // 批量恢复日志备份文件
            foreach ($file_array as $item) {
                if ($item == '0' || empty($item)) {
                    continue;
                }
                $files[] = $item;
            }
            $count = count($files);
            if ($count > 8 || $count < 1) {
                $info = _("日志恢复失败，选中的日志文件个数应小于8");
                $this->Audit->operationLog($info);
                $retval = array('status' => 'false', 'msg' => $info);
                echo Cavy_Json::encode($retval, Cavy_Json::TYPE_OBJECT);
                return false;
            }


            foreach ($files as $item) {
                $file_param = explode("/", $item);
                $count_file = count($file_param);
                $filename = $file_param[$count_file - 1];
                $filename = escapeshellarg($filename);
                unset($file_param[$count_file - 1]);
                $path = implode("/", $file_param);

                if ($path == '') {
                    $path = '/';
                } else {
                    $path = escapeshellarg($path);
                }

                $data = array();
                if (intval($logsrc) == 1) {
                    exec("super bzypython /opt/nsfocus/bin/logcenter/ftpdown.py $path $filename", $data, $rtn);
                }
                if (intval($logsrc) == 2) {
                    exec("super bzypython -W ignore /opt/nsfocus/bin/logcenter/ossdown.py -p $path -f $filename", $data, $rtn);
                }

                if (empty($data) && !$rtn) {
                    $record['count'] = $record['count'] + 1;
                    exec("super bzyrm -rf /opt/nsfocus/sda1/tmp/*");
                    exec("/bin/super bzymv /tmp/backup.rar /opt/nsfocus/sda1/tmp/backup.rar");
                    exec("super bzyrar -y e -hp\"Yo(+5r74\" /opt/nsfocus/sda1/tmp/backup.rar /opt/nsfocus/sda1/tmp/", $data1, $rtn1);

                    if (!$rtn1) {
                        /**
                         * @Author yangyanxiang
                         * 区别还原以前备份的日志文件和新的打包压缩结构的日志文件
                         * 旧的日志文件结构为:backup.rar->backup.tar->backup.sql、/opt/nsfocus/sd1/restore
                         * 新打包的文件结构为:backup.rar->backup.tar.gz、backup.sql
                         */
                        if (file_exists("/opt/nsfocus/sda1/tmp/backup.sql") && file_exists("/opt/nsfocus/sda1/tmp/backup.tar.gz")) {
                            chdir("/");
                            exec("/bin/super bzytar xvzf /opt/nsfocus/sda1/tmp/backup.tar.gz -P", $data2, $rtn2);
                        } else if (file_exists("/opt/nsfocus/sda1/tmp/backup.tar")) { //支持就旧有的结构
                            exec("/bin/super bzytar xvzf /opt/nsfocus/sda1/tmp/backup.tar -P", $data2, $rtn2);
                        }

                        if (!$rtn2) {
                            exec("/opt/nsfocus/postgresql/bin/psql -U postgres -d logcenter < /opt/nsfocus/sda1/tmp/backup.sql", $data3, $rtn3);

                            if (!$rtn3) {
                                exec("super bzychmod -R 777 /opt/nsfocus/sda1/restore");
                                //exec("/bin/super bzysync sync");
                                exec("super bzyrm -rf /opt/nsfocus/sda1/tmp/*");
                                //调整日志的sequence
                                $db = new PDO(Cavy::$ENV['dsn']);
                                $sql = "SELECT setval('session_log_id_seq',(select max(id) from session_log));"; //会话
                                $db->query($sql);
                                $sql = "SELECT setval('system_log_id_seq',(select max(id) from system_log));"; //系统
                                $db->query($sql);
                                $record['flag'] = 1;
                                $record_tmp[] = trim($filename, "'");
                                $flag = 1;
                            }
                        }
                    }
                }
            }
            if ($record['flag'] != 0) {
                foreach ($record_tmp as $backup_file) {
                    $info = _("日志恢复成功，文件名：" . $backup_file);
                    $this->Audit->operationLog($info);
                }
                $retval = array('status' => 'true', 'count' => $record['count'], 'backup_file' => $record_tmp);
                echo Cavy_Json::encode($retval, Cavy_Json::TYPE_OBJECT);
                return true;
            } else {
                $info = _("日志恢复失败");
                $this->Audit->operationLog($info);
                $retval = array('status' => 'false');
                echo Cavy_Json::encode($retval, Cavy_Json::TYPE_OBJECT);
                return;
            }
        } elseif ($cat == "restore") {
            $file = $_FILES['file'];
            if ($file['error'] == 0) {
                if (($file['size'] > 1024 * 1024 * 100) || ($file['size'] == 0)) {
                    $info = _("对不起，你上传的文件大小不正确");
                } else {
                    if (substr($file['name'], strrpos($file['name'], ".") + 1, strlen($file['name'])) != "rar") {
                        //if(strstr($file['name'], '.bin') != ".bin") {
                        $info = _("不是合法的备份文件（*.rar）");
                    } else if (!move_uploaded_file($file['tmp_name'], "/tmp/backup.rar")) {
                        $info = _("复制文件失败");
                    } else {
                        $info = _("日志恢复失败");
                        exec("super bzyrm -rf /opt/nsfocus/sda1/tmp/*");
                        exec("/bin/super bzymv /tmp/backup.rar /opt/nsfocus/sda1/tmp/backup.rar");
                        exec("super bzyrar -y e -hp\"Yo(+5r74\" /opt/nsfocus/sda1/tmp/backup.rar /opt/nsfocus/sda1/tmp/", $data, $rtn);
                        if (!$rtn) {
                            /**
                             * @Author yangyanxiang
                             * 区别还原以前备份的日志文件和新的打包压缩结构的日志文件
                             * 旧的日志文件结构为:backup.rar->backup.tar->backup.sql、/opt/nsfocus/sd1/restore
                             * 新打包的文件结构为:backup.rar->backup.tar.gz(存放用户选择备份时间范围内的字符日志压缩包)、backup.sql
                             */
                            if (file_exists("/opt/nsfocus/sda1/tmp/backup.sql") && file_exists("/opt/nsfocus/sda1/tmp/backup.tar.gz")) {
                                chdir("/");
                                exec("/bin/super bzytar xvzf /opt/nsfocus/sda1/tmp/backup.tar.gz -P", $data, $rtn);
                            } else if (file_exists("/opt/nsfocus/sda1/tmp/backup.tar") || file_exists("/opt/nsfocus/sda1/tmp/backup.tar.gz")) { //支持就旧有的结构


                                if (file_exists("/opt/nsfocus/sda1/tmp/backup.tar")) {
                                    exec("/bin/super bzytar xvzf /opt/nsfocus/sda1/tmp/backup.tar -P", $data, $rtn);
                                }

                                if (file_exists("/opt/nsfocus/sda1/tmp/backup.tar.gz")) {
                                    chdir("/");
                                    exec("/bin/super bzytar xvzf /opt/nsfocus/sda1/tmp/backup.tar.gz -P", $data, $rtn);
                                }
                            }
                            if (!$rtn) {
                                exec("/opt/nsfocus/postgresql/bin/psql -U postgres -d logcenter < /opt/nsfocus/sda1/tmp/backup.sql", $data, $rtn);
                                if (!$rtn) {
                                    exec("super bzychmod -R 777 /opt/nsfocus/sda1/restore");
                                    //exec("/bin/super bzysync sync");
                                    exec("super bzyrm -rf /opt/nsfocus/sda1/tmp/*");

                                    //调整日志的sequence
                                    $db = new PDO(Cavy::$ENV['dsn']);
                                    $sql = "SELECT setval('session_log_id_seq',(select max(id) from session_log));"; //会话
                                    $db->query($sql);
                                    $sql = "SELECT setval('system_log_id_seq',(select max(id) from system_log));"; //系统
                                    $db->query($sql);

                                    $info = _("日志恢复成功");
                                    $flag = 1;
                                }
                            }
                        }
                    }
                }
            } else if ($file['error'] == 1 || $file['error'] == 2) {
                $info = _('对不起，你上传的文件大小不正确');
            } else if ($file['error'] == 3) {
                $info = _('文件传输错误');
            } else if ($file['error'] == 4) {
                $info = _('文件未被上传');
            } else {
                $info = _('文件传输错误，错误码：') . $file['error'];
            }
            if ($flag) {
                $this->Audit->operationLog($info);
            } else {
                $this->Audit->operationLog(_("日志恢复失败"));
            }
            echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("' . $info . '");location.replace("/system/log");</script>';
        } else {
            $dom = new DOMDocument();
            $dom->load("/opt/nsfocus/etc/sas_f_config.xml");
            $backup = $dom->getElementsByTagName("backup")->item(0);
            $ftpserver = $dom->getElementsByTagName("ftpserver")->item(0);
            $ossconfig = $dom->getElementsByTagName("ossconfig")->item(0);

            if ($cat == "settings") {
                $item = $this->_params['autobackup'];
                if ($item['form'] == 'backup_auto') {
                    $msg = '更新日志自动备份配置';

                    if ($item['type'] == 1) {
                        $item['type'] = 'day';
                    } elseif ($item['type'] == 2) {
                        $item['type'] = 'week';
                    } elseif ($item['type'] == 3) {
                        $item['type'] = 'month';
                    }
                    if ($item['enabled']) {
                        $item['enabled'] = 'true';
                    } else {
                        $item['enabled'] = 'false';
                    }
                    if ($item['clearup'] == 'on') {
                        $item['clearup'] = 'true';
                    } else {
                        $item['clearup'] = 'false';
                    }

                    // record dist type
                    $backup->setAttribute("logdist", $item["logdist"]);
                    $backup->setAttribute("enabled", $item['enabled']);
                    if ($item['type']) {
                        $backup->setAttribute("type", $item['type']);
                    }
                    if ($item['day']) {
                        $backup->setAttribute("day", $item['day']);
                    }
                    if (isset($item['week'])) {
                        $backup->setAttribute("week", $item['week']);
                    }
                    if (isset($item['hour'])) {
                        $backup->setAttribute("hour", $item['hour']);
                    }
                    if (isset($item['clearup'])) {
                        $backup->setAttribute("clear_log_files", $item['clearup']);
                    }

                    $dom->save("/tmp/sas_f_config.xml");
                    system("super bzymv /tmp/sas_f_config.xml /opt/nsfocus/etc/sas_f_config.xml");
                    //system("/bin/super bzysync");
                } elseif ($item['form'] == 'backup_s3') {
                    // setup oss config information

                    $ossconfig->setAttribute("authtype", $item["authtype"]);
                    $ossconfig->setAttribute("access_key", $item["access_id"]);
                    $ossconfig->setAttribute("access_secret", $item["access_key"]);
                    $ossconfig->setAttribute("bucket_name", $item["bucket_name"]);

                    // copy to dist
                    $dom->save("/tmp/sas_f_config.xml");
                    system("super bzymv /tmp/sas_f_config.xml /opt/nsfocus/etc/sas_f_config.xml");

                    if ($item['test_oss_if'] == "true" and 1==2) {

                        exec("super bzypython -W ignore /opt/nsfocus/bin/logcenter/osstest.py", $data, $rtn);

                        $lic = new License("/opt/nsfocus/etc/eoi.agent.lic");
                        $dom = new DOMDocument();
                        $dom->loadXML($lic->content);
                        $cloud = $dom->getElementsByTagName("publiccloud")->item(0)->getAttribute("type");
                        $rpc = new RpcService("cloud_info");
                        $storage_alias = $rpc->get_aname($cloud);

                        if ($rtn) {
                            $info = _($storage_alias . "测试失败" . "(失败原因:$data[0])");
                        } else {
                            $info = _($storage_alias . "服务器测试成功");
                        }
                    }

                } else {
                    $msg = _("更新FTP服务器配置信息");
                    $str = implode('.', $item);
                    if (!is_valid_text2($str)) {
                        echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("含有非法参数");location.replace("/system/log");</script>';
                        return false;
                    }
                    $item['host'] = str_replace(' ', '', $item['host']);
                    $ftpserver->setAttribute("host", htmlspecialchars($item['host']));
                    $ftpserver->setAttribute("port", (int)$item['port']);
                    $ftpserver->setAttribute("user", htmlspecialchars($item['user']));
                    $crpypt_pass = rc4Encode($item['pass']);
                    $ftpserver->setAttribute("pass", $crpypt_pass);
                    $ftpserver->setAttribute("path", $item['path']);
                    $ftpserver->setAttribute("encode", $item['encode']);

                    $dom->save("/tmp/sas_f_config.xml");
                    system("super bzymv /tmp/sas_f_config.xml /opt/nsfocus/etc/sas_f_config.xml");
                    //system("/bin/super bzysync");

                    if ($item['test_ftp_if'] == "true") {
                        exec("touch /tmp/ftptest.log");
                        /*
                        if (!$item['pass']) {
                            $item['pass'] = $ftpserver->getAttribute('pass');
                            $decrpyt_pass = rc4Decode($item['pass']);
                        }
                        // 防止命令行攻击
                        $host_shell = escapeshellarg($item['host']);
                        $port_shell = intval($item['port']);
                        $user_shell = escapeshellarg($item['user']);
                        $pass_shell = escapeshellarg($item['decrpyt_pass']);
                        $path_shell = escapeshellarg($item['path']);
                        */

                        exec("super bzypython /opt/nsfocus/bin/logcenter/ftpup.py >/dev/null 2>&1", $data, $rtn);
                        if ($rtn) {
                            $info = _("FTP服务器测试失败");
                        } else {
                            $info = _("FTP服务器测试成功");
                        }
                    }
                }
                $this->Audit->operationLog($msg);
            }

            $item = array();
            $item['enabled'] = $backup->getAttribute('enabled');
            $item['type'] = $backup->getAttribute('type');
            $item["logdist"] = $backup->getAttribute("logdist");
            $item['day'] = $backup->getAttribute('day');
            $item['week'] = $backup->getAttribute('week');
            $item['hour'] = $backup->getAttribute('hour');
            $item['clearup'] = $backup->getAttribute('clear_log_files');
            $item['host'] = $ftpserver->getAttribute('host');
            $item['port'] = $ftpserver->getAttribute('port');
            $item['user'] = $ftpserver->getAttribute('user');
            $item['pass'] = $ftpserver->getAttribute('pass');
            $decrpyt_pass = rc4Decode($item['pass']);
            $item['pass'] = $decrpyt_pass;
            $item['path'] = $ftpserver->getAttribute('path');
            $item['encode'] = $ftpserver->getAttribute('encode');
            // get oss config information
            $item['authtype'] = $ossconfig->getAttribute("authtype");
            //  if not set bucket name then set to hash
            $bucket_name = $ossconfig->getAttribute("bucket_name");
            if (empty($bucket_name)) {
                $lic = new License("/opt/nsfocus/etc/eoi.agent.lic");
                $lic = $lic->info();
                $bucket_name = "vsash-" . strtolower(str_replace("-", "", $lic["hash1"]));
            }
            $item['bucket_name'] = $bucket_name;
            $item['access_id'] = $ossconfig->getAttribute("access_key");
            $item['access_key'] = $ossconfig->getAttribute("access_secret");

            $item['info'] = $info;

            //----获取系统的前一天日期，手动备份选择时间段的时候需要修改
            $yesterday_date = array();
            exec('super bzydate -d"1 day ago" +"%Y-%m-%d"', $yesterday_date);
            if (!empty($yesterday_date)) {
                $item['yesterday'] = $yesterday_date[0];
            }
            $clear_success = file_exists("/tmp/manual_clear_log_ing");
            $item['clear_success'] = $clear_success;

            $log_base_dir = "/opt/nsfocus/sda1/restore";
            $log_oldest_dir = $this->getOldestLogPath($log_base_dir);
            $item["oldestLog"] = substr($log_oldest_dir, strlen($log_base_dir) + 1);

            $this->_render($item, 'log/settings');
        }

    }

    /**
     * @brief 查找日志目录$logDir中最早的文件路径
     *
     * @params logDir 指定的目录
     *
     * @return 返回该目录中最早的日志路径
     */
    public function getOldestLogPath($log_dir)
    {
        $dir_list = array();
        $dh = opendir($log_dir);

        while (false !== ($file = readdir($dh))) {
            if ($file == "." || $file == ".." || !is_numeric($file)) {
                continue;
            }
            $dir_list[] = (int)$file;
        }

        if (empty($dir_list)) {
            return $log_dir;
        }

        $oldest = min($dir_list);
        $dir_path = $log_dir . DIRECTORY_SEPARATOR . $oldest;

        if (is_dir($dir_path)) {
            return $this->getOldestLogPath($dir_path);
        } else {
            return $dir_path;
        }
    }

    /**
     * 检测FTP备份日志状态，1表示正在备份
     * 0表示空闲状态，其他表示备份结果
     *
     * @return int|string 备份状态
     */
    public function checkBackupStatus()
    {
        if (file_exists("/tmp/sas_backuplog")) {
            $file_content = file("/tmp/sas_backuplog");
            if (empty($file_content)) {
                // 正在备份
                return 1;
            } else {
                // xxxxx,xxxxx,true/false 表示正在备份
                $first_line = explode(",", $file_content[0]);

                if (count($first_line) == 4) {
                    // 正在备份
                    return 1;
                } else {
                    // 备份完成，提示备份结果状态
                    exec("/bin/super bzyrm -rf /tmp/sas_backuplog");
                    return $file_content[0];
                }
            }
        } else {
            return 0;
        }
    }

    /**
     * 处理磁盘相关的请求
     *
     * @return void|boolean
     */
    public function disk()
    {
        //非审计管理员无法操作此页面
        $login_user_role = $_SESSION['login.user']['roles'][0];
        if ($login_user_role != "audit") {
            return false;
        }
        $cat = $this->_params['cat'];
        $item = $this->_params['disk'];
        $submit_type = $item['submit_type'];
        if (empty($submit_type)) {
            $submit_type = 'manual';
        }
        if ($cat == 'diskWarn') { //当磁盘剩余空间达到磁盘告警阈值则会显示告警提示页面
            $disk_info['diskfree'] = $this->_params['diskfree'];
            $disk_info['diskfree_real'] = $this->_params['diskfree_real'];
            $this->_render($disk_info, 'disk/diskWarn');
            return;
        }
        $dom = new DOMDocument();
        $dom->load("/opt/nsfocus/etc/sas_f_config.xml");
        $diskmanager = $dom->getElementsByTagName("diskmanager")->item(0);
        $smtp_server = $dom->getElementsByTagName("smtp")->item(0);

        $user_model = Cavy::getModel('User');
        $user_obj = $user_model->findUser($_SESSION['login.user']['account']);
        // 获取磁盘大小
        $sdspace = $this->SysConfig->getDiskSpace();
        $sdspace = intval($sdspace / 1024);
        $sdspace = floor($sdspace / 100) * 100;
        if ($cat == "settings" && $submit_type != 'manual') { //处理自动清理和磁盘告警配置数据保存
            if ($item['diskfree'] && (int)$item['diskfree'] >= 100 && (int)$item['diskfree'] <= $sdspace) { //磁盘剩余空间告警阈值
                $diskmanager->setAttribute("diskfree", (int)$item['diskfree']);
            }
            if ($item['diskfree_del'] && (int)$item['diskfree_del'] >= 10 && (int)$item['diskfree_del'] <= 500) { //磁盘剩余空间删除日志阈值
                $diskmanager->setAttribute("diskfree_del", (int)$item['diskfree_del']);
            }
            if ($item['sendmail'] == "true" && $smtp_server->getAttribute('enabled') == "true" && !empty($user_obj->mail) && $submit_type == 'warn') {
                $diskmanager->setAttribute("sendmail", "true");
            } elseif ($item['sendmail'] == "false") {
                $diskmanager->setAttribute("sendmail", "false");
            }

            $diskmanager->setAttribute("clear_log", "true");
            $diskmanager->setAttribute("enabled", 'true');

            $dom->save("/tmp/sas_f_config.xml");
            if (file_exists("/tmp/mail_clear_log_flag")) {
                exec("/bin/super bzyrm rm -f  /tmp/mail_clear_log_flag");
            }
            system("super bzymv /tmp/sas_f_config.xml /opt/nsfocus/etc/sas_f_config.xml");
            //system("/bin/super bzysync");
            $this->Audit->operationLog(_("更改磁盘空间告警设置"));
        }
        //----处理手动清理，手动清理的时候创建文件/tmp/manual_clear_log文件，--------------
        if ($cat == "settings" && $submit_type == 'manual') {
            $time1 = $this->_params['time1'];
            $time2 = $this->_params['time2'];
            $log_type = $this->_params['log_type'];
            $danger_level = $this->_params['danger_level'];
            if (!empty($time1) && !empty($time2) && $time1 <= $time2) {
                $manual_clear_str = str_replace("-", "", $time1) . ',' . str_replace("-", "", $time2) . ',' . $log_type . ',' . $danger_level;
                if (intval($log_type) > 0 && intval($danger_level) > 0) { //检查如果没选择日志类型和危险级别则不需要清除
                    file_put_contents('/tmp/manual_clear_log', $manual_clear_str);
                    file_put_contents('/tmp/manual_clear_log_ing', '');
                    $this->Audit->operationLog(_("磁盘管理，设置手动清理") . $time1 . _('至') . $time2 . _('时间段的日志'));
                }
            }
            return;
        }
        $clear_success = file_exists("/tmp/manual_clear_log_ing");
        //如果该文件存在则说明正在清除中，如果不存在说明没在清除
        if ($cat == 'status') {
            //该文件不存在说明没在进行手动清理中
            if (!$clear_success) {
                echo 1; //不显示  正在清理
            } else {
                echo 0;
            }
            return false;
        }
        $item = array();
        $item['sdspace'] = $sdspace;
        $item['enabled'] = $diskmanager->getAttribute('enabled');
        $item['diskfree'] = $diskmanager->getAttribute('diskfree');
        $item['diskfree_del'] = $diskmanager->getAttribute('diskfree_del');
        $item['type'] = $submit_type;
        $item['sendmail'] = $diskmanager->getAttribute('sendmail');
        $item['clear_log'] = $diskmanager->getAttribute('clear_log');
        $item['day'] = $diskmanager->getAttribute('day');
        $item['clear_success'] = $clear_success;
        $this->_render($item, 'disk/settings');
    }

    /**
     * 调用model 更新登录方式参数配置
     *
     * @return boolean|void
     */
    public function autologin()
    {
        $cat = $this->_params['cat'];
        $SysAutoLogin = Cavy::getModel("SysAutoLogin");
        if ($cat == 'update') {
            if ($this->_hasError()) {
                $errors = $this->getFieldErrors();
                $output = array(
                    "result" => "error",
                    "context" => array(
                        "fieldErrors" => $errors
                    )
                );
                echo "(" . json_encode($output) . ")";
                return false;
            }
            $setting = $this->_params['setting'];
            $SysAutoLogin->setConfig($setting);

            $output = array(
                "result" => "success",
                "context" => array(
                    "actionErrors" => array("更新设备登录方式成功")
                )
            );
            $this->Audit->operationLog(_('更新设备登录方式'));
            echo "(" . json_encode($output) . ")";
        } else {
            $setting = $SysAutoLogin->getConfig();
            //获取异常帐号配置
            $items = $SysAutoLogin->getConfig('exception');
            $items = explode(",", $items);
            $items = array(
                'ghost_open' => $items[0],
                'orphan_open' => $items[1],
                'not_use_day' => $items[2]
            );
            $login_user_id = (int)$_SESSION['login.user']['id'];
            $login_user_account = $_SESSION['login.user']['account'];
            $login_user_role = $_SESSION['login.user']['roles'][0];
            //是否有设备录入的权限
            $has_device_manage = Cavy::getModel("UserResources")->isAllowedUser(
                $login_user_id,
                $login_user_account,
                $login_user_role,
                'device',
                'create'
            );
            $data = array(
                'setting' => $setting,
                'exception' => $items,
                'has_device_manage' => $has_device_manage
            );
            $this->_render($data, 'autologin');
        }
    }

    /**
     * 调用model 更新账号异常参数配置
     *
     * @return boolean|void
     */
    public function exceptionaccount()
    {
        $SysAutoLogin = Cavy::getModel("SysAutoLogin");
        if ($this->_hasError()) {
            $errors = $this->getFieldErrors();
            $output = array(
                "result" => "error",
                "context" => array(
                    "fieldErrors" => $errors
                )
            );
            echo "(" . json_encode($output) . ")";
            return false;
        }
        $display_orphan = $this->_params['display_orphan'];
        $orphan_not_access_day = $this->_params['orphan_not_access_day'];
        $display_ghost = $this->_params['display_ghost'];
        $data = array('ghost_open' => $display_ghost, 'orphan_open' => $display_orphan, 'not_use_day' => $orphan_not_access_day);
        //存储异常帐号配置
        $result = $SysAutoLogin->setConfig($data, 'exception');
        if ($result == 0) {
            $output = array(
                "result" => "success",
                "context" => array("msg" => "保存配置成功")
            );
            $this->Audit->operationLog(_('异常账号检测配置更改'));
            echo "(" . json_encode($output) . ")";
        }

    }

    function validateOnExceptionaccount($validator)
    {
        $display_orphan = $this->_params['display_orphan'];
        $orphan_not_access_day = $this->_params['orphan_not_access_day'];
        $display_ghost = $this->_params['display_ghost'];
        if (!in_array($display_orphan, array('0', '1'))) {
            $validator->addFieldError('', _("参数错误"));
            return false;
        }
        if (!in_array($display_ghost, array('0', '1'))) {
            $validator->addFieldError('', _("参数错误"));
            return false;
        }
        if (!is_numeric($orphan_not_access_day) || $orphan_not_access_day < 0) {
            $validator->addFieldError('', _("天数必须为正整数"));
            return false;
        }
    }

    /**
     * syslog服务器配置请求处理
     *
     * @return void
     */
    public function syslogconf()
    {
        // syslog,syslogport
        $syslog = $this->_params['syslog'];
        $syslogport = (int)$this->_params['syslogport'];
        $cat = $this->_params['cat'];
        if (is_ip($syslog) && $cat == 'update' && is_port($syslogport)) {
            $this->SysConfig->setSyslog($_REQUEST);
        }
        $this->_render(null, 'setting/syslogconf');
    }

    /**
     * ca、server证书管理
     *
     * @return void
     */
    public function certificate()
    {
        $cat = $this->_params['cat'];
        $action = $this->_params['action'];
        if ($cat == 'ca') {
            if ($action == 'set') {
                $this->SysConfig->setCertificateInfo('ca', $this->_params['ca']);
                // 重置CA后，修改admin和 audit认证方式为本地认证
                $result = Cavy::getModel("User")->disableUserUK(array(1, 2));
                // 向audit发送消息
                $title = _("堡垒机管理员重置CA根证书");
                $detail = _("堡垒机管理员已重新生成CA根证书，请请重新为审计员更换证书");
                $cmd = sprintf("/opt/nsfocus/bin/sash_message/send_message.py --base64 --recv_users_id %d"
                    . " --type %d --title '%s' --detail '%s' > /dev/null 2>&1 &",
                    2, 14, base64_encode($title), base64_encode($detail));

                system($cmd);
                $this->_render(null, 'success');
            } else if ($action == 'create') {
                $server_crt_info = $this->SysConfig->getCertificateInfo('ca');
                $this->_render($server_crt_info, 'setting/ca_config');
            } else if ($action == 'ca_exist') {
                if (file_exists('/etc/apache2/ssl/ca.key') && file_exists('/etc/apache2/ssl/ca.crt')) {
                    echo 'true';
                } else {
                    echo 'false';
                }
            }
        } else if ($cat == "tool") {
            if ($action == 'items') {
                echo $this->Download->get_usbkey_tools();
            } elseif ($action == 'download') {
                $type = $this->_params['type'];
                // 防止目录穿越
                if (!preg_match('/^[\w\.:\-]+$/', $type)) {
                    return false;
                }
                $path = "/opt/nsfocus/download/" . $type . "_Tools.rar";
                $filename = $type . "_Tools.rar";
                $this->Download->download_file($path, $filename);
            } elseif ($action == 'index') {
                $this->_render(null, 'usbKeyTools');
            } elseif ($action == 'csr') {
                $path = '/opt/nsfocus/web/apache2/conf/ssl/server.csr';
                $filename = 'server.csr';
                $this->Download->download_file($path, $filename);
            }
        } else {
            $info = $this->SysBase->upload('cert');
            $this->Audit->operationLog($info);
            echo '<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><script>alert("' . $info . '");location.replace("/system/setting/cat/auth");</script>';
        }
    }

    /**
     * cnpc证书管理 [中石油定制]
     *
     * @return void
     */
    public function cnpc()
    {
        $this->_render(array("data" => $this->SysBase->get_cnpc_config()), 'setting/cnpc');
    }

    /**
     * cnpc配置保存 [中石油定制]
     *
     * @return void
     */
    public function saveCNPC()
    {
        $dom = new DOMDocument();
        $dom->load("/opt/nsfocus/etc/sas_f_config.xml");
        $params = $this->_params;
        $httpheader = $params['httpheader'];
        $proxyserverip = $params['proxyserverip'];
        $topdomain = $params['topdomain'];
        $seconddomain = $params['seconddomain'];
        $validationcode = $params['validationcode'];

        if ($dom) {
            $proxy = $dom->getElementsByTagName("cnpcproxy")->item(0);
            $config = $proxy->getElementsByTagName("config")->item(0);
            if ($config) {
                $config->setAttribute("http_header", base64_encode($httpheader));
                $config->setAttribute("proxy_server_ip", base64_encode($proxyserverip));
                $config->setAttribute("top_domain", base64_encode($topdomain));
                $config->setAttribute("second_domain", base64_encode($seconddomain));
                $config->setAttribute("validation_code", base64_encode($validationcode));
            }
        }
        $dom->save("/tmp/sas_f_config.xml");
        system("super bzymv /tmp/sas_f_config.xml /opt/nsfocus/etc/sas_f_config.xml");
        $this->_render(array("data" => $params), 'setting/cnpc');
    }

    /**
     * 运维备注配置管理
     *
     * 配置管理运维备注，在建立会话之前会取出默认或用户配置的运维备注提用户选择
     *
     * @author yangyanxiang<yangyanxiang@intra.nsfocus.com>
     *
     * @return void
     * @access public
     */
    public function accessComment()
    {
        $cat = $this->_params['cat']; //操作类型
        $id = $this->_params['id']; //运维备注id

        //操作完成后重新刷新页面js代码
        $reload_page_script = "<script>
        top.frames['mainFrame'].Table_refh();
        top.dialog.hide();
        </script>";

        switch ($cat) {
            case 'index' : //运维备注列表页面
                $this->_render(null, 'accesscomment/index');
                break;
            case 'items' : //提供获取运维备注列表接口

                //生成token--罗真
                $token = self::create_token();
                $_SESSION['token' . __CLASS__] = $token;
                echo $this->AccessComment->getList($token);//将token参数传出
                break;
            case 'create' : //创建运维备注

                //生成token--罗真
                $token = $_SESSION['token' . __CLASS__];
                $this->_render($token, 'accesscomment/create');
                break;
            case 'edit' : //编辑运维备注
                //生成token--罗真
                $token = $_SESSION['token' . __CLASS__];
                $item = $this->AccessComment->fetch($id);
                $option = array("item" => $item, "token" => $token);
                $this->_render($option, 'accesscomment/edit');
                break;
            case 'insert' : //插入运维备注

                $token = isset($this->_params['token']) ? $this->_params['token'] : '';
                //传入token验证--罗真
                $sta = $this->is_token($token);
                if (!$sta) {
                    return false;
                }
                if (!is_valid_text($this->_params['comment']['value'])) {
                    return false;
                }
                $insert_id = $this->AccessComment->insert($this->_params['comment']);
                if ($insert_id) {
                    $this->Audit->operationLog(_("新建运维备注，编号") . '[' . $insert_id . ']');
                }
                echo $reload_page_script;
                break;
            case 'delete' : //删除运维备注
                $token = isset($this->_params['token']) ? $this->_params['token'] : '';
                //传入token验证--罗真
                $sta = $this->is_token($token);
                if (!$sta) {
                    return false;
                }
                $this->AccessComment->delete($id);
                $this->Audit->operationLog(_("删除运维备注，编号") . '[' . $id . ']');
                echo $reload_page_script;
                break;
            case 'update' : //更新运维备注

                $token = isset($this->_params['token']) ? $this->_params['token'] : '';
                //传入token验证--罗真
                $sta = $this->is_token($token);
                if (!$sta) {
                    return false;
                }
                if (!is_valid_text($this->_params['comment']['value'])) {
                    return false;
                }
                $update_id = $this->AccessComment->update($this->_params['comment']);
                if ($update_id) {
                    $this->Audit->operationLog(_("更新运维备注，编号") . '[' . $update_id . ']');
                }
                echo $reload_page_script;
                break;
            default :
                break;
        }
    }

    /**
     * 虚拟配置管理
     *
     * 配置管理内容包括：应用名称、cpu、内存、控制按钮、接口配置、应用程序查看
     *
     * @author gongke<gongke@intra.nsfocus.com>
     *
     * @return void
     */
    public function virtualMachine()
    {
        $cat = $this->_params['cat']; // CURD操作
        $type = $this->_params['type']; // 操作的类型,虚拟机/虚拟网络接口 /应用程序

        if (isset($this->_params['vm_id'])) {
            $vm_id = intval(($this->_params['vm_id']));
        } else {
            $vm_id = $this->VirtualMachine->getVmId();
        }
        // 虚拟机id

        if ($this->_hasError()) {
            $msg = $this->getFieldErrors();
            if ($type === 'interface') {
                $this->_render($msg['field'], 'virtualmachine/failed');
            } else {
                echo json_encode(array(
                    'status' => -1,
                    'msg' => $msg['field'][0]
                ));
            }
            return;
        }

        if (!isset($cat) && $vm_id == 0) {
            $this->_render(null, 'virtualmachine/empty');
        } else {
            switch ($cat) {
                case 'index' :
                    if ($vm_id != 0) {
                        $vm_info = $this->VirtualMachine->getVMInfo($vm_id);
                        $names = $this->VirtualMachine->getVMNames($vm_id);
                        $disk_file_path = "/opt/nsfocus/sda1/vm/vm{$vm_id}.qcow2";
                        $origin_file_path = "/opt/nsfocus/sda1/vm/origin.qcow2";
                        $res = exec("/bin/super bzygethash", $output, $return_var);

                        $vm_info['vm_disk_file'] = file_exists($disk_file_path);
                        $vm_info['origin_disk_file'] = file_exists($origin_file_path);
                        $vm_info['vm_names'] = $names;
                        $vm_info['ha_switch'] = $this->HaVrrp->getStatus();
                        $vm_info['gateway'] = $this->VirtualMachine->getDefaultGateway();
                        $vm_info['VMs'] = $this->VirtualMachine->getVMIds(true);
                        $vm_info['feature'] = $res;

                        $this->_render($vm_info, 'virtualmachine/index');
                    } else {
                        $this->_render(null, 'virtualmachine/empty');
                    }
                    break;
                case 'control' : // 虚拟机控制程序
                    $action = $this->_params['action'];
                    $this->VirtualMachine->VMControl($action, $vm_id);
                    break;
                case 'vmstatus' : // 虚拟机运行状态
                    session_write_close();
                    echo $this->VirtualMachine->getVMStatus($vm_id);
                    break;
                case 'update' : // 更新配置(虚拟机/接口)
                    if ($type === 'vm') {
                        $params = $this->_params;
                        $params['vm_name'] = urldecode($params['vm_name']);
                        $ret = $this->VirtualMachine->updateVM($params);
                        echo json_encode($ret);
                    } else if ($type === 'interface') {
                        $params = $this->_params;
                        $ret = $this->VirtualMachine->updateInterface($params);
                        $ret['gateway'] = $this->VirtualMachine->getDefaultGateway();
                        //$opts['vm'] = $this->VirtualMachine->getDataFromCfg();
                        echo json_encode($ret);
                    }
                    break;
                case 'editInterface' : // 应用平台接口编辑页面
                    //$opts['vm'] = $this->VirtualMachine->getDataFromCfg();
                    $opts['gateway'] = $this->VirtualMachine->getDefaultGateway();
                    $opts['code'] = -1;

                    $this->_render($opts, "virtualmachine/editInterface");
                    break;
                case 'delete' :
                    if ($type == 'vm') {
                        $forceDel = trim($this->_params['force']);
                        $ret = $this->VirtualMachine->deleteVM($vm_id, $forceDel);
                        echo json_encode($ret);
                    }
                    break;
                case 'relative' :
                    $app_id = (int)$this->_params['id'];
                    if ($type == 'app') {
                        $ret = $this->VirtualMachine->checkRaltiveWithApp($app_id);
                        echo json_encode($ret);
                    } else if ($type == 'vm') {
                        $ret = $this->VirtualMachine->checkRaltiveWithVM($vm_id);
                        echo json_encode($ret);
                    }
                    break;
                case 'appitems' : // 获取app列表
                    $id = (int)$this->_params['vm_id'];
                    $res = $this->VirtualMachine->getAppLists($id);
                    echo json_encode($res);
                    break;
                default :
                    break;
            }
        }
    }

    /**
     * 表单校验 包括应用平台和虚拟网络接口配置
     *
     * @author gongke<gongke@intra.nsfocus.com>
     *
     * @return void
     */
    public function validate($validator)
    {
        // 校验虚拟机ID是否合法
        if (isset($this->_params['vm_id'])) {
            $vm_id = $this->_params['vm_id'];
            if (!is_id($vm_id)) {
                $validator->addFieldError('field', _("应用平台ID不合法"));
                return false;
            }
            /*
            else if ((int)$vm_id > $this->VirtualMachine->getMaxVmCount()) {
                $validator->addFieldError('field', _("应用平台ID超出最限制"));
            }
            */
        }

        if (isset($this->_params['comment'])) {
            $reg_comment = "/^[ 0-9a-zA-Z,\.\x80-\xff\-_\(\)]+$/";
            $comment = $this->_params['comment'];

            if (strlen($comment) > 0 && !preg_match($reg_comment, $comment)) {
                $validator->addFieldError('field', _('备注中包含特殊字符'));
                return false;
            } else if (mb_strlen($comment, 'UTF-8') > 100) {
                $validator->addFieldError('field', _('备注长度不能超过100个字符'));
                return false;
            }
        }
        // 校验虚拟机的名称
        if (isset($this->_params['vm_name'])) {
            $vm_name = $this->_params['vm_name'];
            if ($vm_name == '') {
                $validator->addFieldError('field', _('应用平台名称不存在'));
                return false;
            } else {
                if (!is_valid_text_new($vm_name)) {
                    $validator->addFieldError('field', _('应用平台名称中包含危险字符'));
                    return false;
                } else if (mb_strlen($vm_name, 'UTF-8') > 128) {
                    $validator->addFieldError('field', _('应用平台名称只支持128个字符输入'));
                    return false;
                }
            }
            $vm_names = $this->VirtualMachine->getVMNames((int)$vm_id);
            if (in_array($vm_name, $vm_names)) {
                $validator->addFieldError('field', _('应用平台名称已经存在'));
                return false;
            }
        }

        // 校验CPU核数
        if (isset($this->_params['vm_cpu'])) {
            $vm_cpu = $this->_params['vm_cpu'];
            if ($vm_cpu == '') {
                $validator->addFieldError('field', _("CPU核数不存在"));
                return false;
            } else {
                if ((int)$vm_cpu < 1 || (int)$vm_cpu > 2) {
                    $validator->addFieldError('field', _("CPU核数只能是单核或者双核"));
                    return false;
                }
            }
        }

        // 校验内存大小
        if (isset($this->_params['vm_memory'])) {
            $vm_memory = $this->_params['vm_memory'];
            if ($vm_memory == '') {
                $validator->addFieldError('field', _("内存大小不存在"));
                return false;
            } else {
                if (!is_id($vm_memory)) {
                    $validator->addFieldError('field', _("内存大小只能是整数"));
                    return false;
                }
                if ((int)$vm_memory > 2047 || (int)$vm_memory < 512) {
                    $validator->addFieldError('field', _("内存大小必须在512M-2047M范围内"));
                    return false;
                }
            }
        }

        // 校验网关IP
        if (isset($this->_params['vm_gateway'])) {
            $gateway = str_replace(' ', '', $this->_params['vm_gateway']);
            if ($gateway == '') {
                $validator->addFieldError('field', _("网关IP不存在"));
                return false;
            }
            if (!is_ip4_usage($gateway)) {
                $validator->addFieldError('field', _("网关IP不合法"));
                return false;
            }
            $gatewayArray = explode(".", $gateway);
            for ($i = 0; $i < 4; $i++) {
                if ($gatewayArray[$i] == '0') {
                    $validator->addFieldError('field', _("网关IP各段均不能为0"));
                    return false;
                }
            }
            if ($gatewayArray[3] != '254') {
                $validator->addFieldError('field', _("网关IP格式必须为x.y.z.254"));
                return false;
            }
        }

        return true;
    }

    /**
     * 校验表单提交的参数的合法性
     *
     * @param array $param 表单参数
     *
     * @return boolean;
     */
    public function validateParam($action, $param)
    {
        if ($action == "authParam" && is_array($param)) {
            foreach ($param as $key => $value) {
                if (in_array($key, array('cat', 'target'))) {
                    continue;
                }
                if (!is_numeric($value)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    /*
     * @brief 跳转到展示告警界面
     */
    public function display()
    {
        $this->_render(NULL, 'alarm_display');
    }

    public function config()
    {
        /* 解析配置文件 sas_f_config.xml， 获取磁盘配置和smtp服务器配置 */
        $dom = new DOMDocument();
        $dom->load("/opt/nsfocus/etc/sas_f_config.xml");
        $diskmanager = $dom->getElementsByTagName("diskmanager")->item(0);
        $smtp_server = $dom->getElementsByTagName("smtp")->item(0);

        /* 获取磁盘的空闲值 */
        $sdspace = $this->SysConfig->getDiskSpace();
        $sdspace = intval($sdspace / 1024);
        $sdspace = floor($sdspace / 100) * 100;

        /* 获取用户信息 */
        $user_model = Cavy::getModel('User');
        $user_obj = $user_model->findUser($_SESSION['login.user']['account']);

        $config = $this->SysAlarm->getSystemAlarmConfig();
        $items["config"] = $config[0];
        $items["sdspace"] = $sdspace;
        $items['diskfree'] = $diskmanager->getAttribute('diskfree');
        $items['diskfree_del'] = $diskmanager->getAttribute('diskfree_del');
        $items["smtp_enable"] = $smtp_server->getAttribute("enabled");
        $items["user_obj"] = $user_obj;

        //生成token--罗真
        $token = self::create_token();
        $_SESSION['token' . __CLASS__] = $token;
        $items["token"] = $token;


        debug(__FILE__, __LINE__, ERROR, $items["smtp_enable"]);

        $this->_render($items, 'setting/alarm_config');
    }

    public function alarmDisplay()
    {
        debug(__FILE__, __LINE__, ERROR, "start");


        //生成token--罗真
        $token = self::create_token();
        $_SESSION['token' . __CLASS__] = $token;

        echo $this->SysAlarm->displayAlarm($this->_params['cat'], $token);//新增token参数--罗真
        debug(__FILE__, __LINE__, ERROR, "end");
    }

    public function alarmDel()
    {
        $tokenVerify = isset($this->_params['token']) ? $this->_params['token'] : '';
        //传入token验证--罗真
        $sta = $this->is_token($tokenVerify);
        if (!$sta) {
            return false;
        }

        //生成token--罗真
        $token = self::create_token();
        $_SESSION['token' . __CLASS__] = $token;

        echo $this->SysAlarm->delAlarmById($this->_params['cat'], $this->_params['id'], $token);//新增token参数--罗真
    }

    public function alarmPeerDel()
    {
        $tokenVerify = isset($this->_params['token']) ? $this->_params['token'] : '';
        //传入token验证---罗真
        $sta = $this->is_token($tokenVerify);
        if (!$sta) {
            return false;
        }

        //生成token--罗真
        $token = self::create_token();
        $_SESSION['token' . __CLASS__] = $token;

        echo $this->SysAlarm->delPeerAlarmById($this->_params['cat'], $this->_params['id'], $token);//新增token参数--罗真
    }

    public function alarmConfig()
    {
        $tokenVerify = isset($this->_params['token']) ? $this->_params['token'] : '';
        //传入token验证---罗真
        $sta = $this->is_token($tokenVerify);
        if (!$sta) {
            return false;
        }

        if (!empty($this->_params["disk"])) {
            $item = $this->_params["disk"];
            if ((int)$item['diskfree_del'] > 500 || (int)$item['diskfree_del'] < 10) {
                return false;
            }
            if (((int)$item['diskfree'] > 900 || (int)$item['diskfree'] < 100) && (int)$item['diskfree'] >= (int)$item['diskfree_del']) {
                return false;
            }
            /* 解析配置文件 sas_f_config.xml， 获取磁盘配置和smtp服务器配置 */
            $dom = new DOMDocument();
            $dom->load("/opt/nsfocus/etc/sas_f_config.xml");
            $diskmanager = $dom->getElementsByTagName("diskmanager")->item(0);

            debug(__FILE__, __LINE__, ERROR, $item);
            $diskmanager->setAttribute("diskfree", (int)$item['diskfree']);
            $diskmanager->setAttribute("diskfree_del", (int)$item['diskfree_del']);
            $dom->save("/tmp/sas_f_config.xml");
            system("super bzymv /tmp/sas_f_config.xml /opt/nsfocus/etc/sas_f_config.xml");
            //system("/bin/super bzysync");
        }

        /* 保存是否发送邮件和通知的配置 */
        $this->SysAlarm->updateAlarmConfig($this->_params["message_type_9"]);
        $this->config();
    }

    /**
     * 校验token
     *
     * @return  boolean true --效验成功
     */
    private function is_token($token)
    {
        $key = isset($_SESSION['token' . __CLASS__]) ? $_SESSION['token' . __CLASS__] : '';
        if ($token === $key && $key != null) {
            return true;
        } else {
            $this->addFieldError('token', '非法操作!');
            echo json_encode($this->getFieldError('token'));
            exit();
        }
    }

    /**
     * 生成token
     *
     * @return string --md5加密随机字符串
     */
    private function create_token()
    {
        $encrypt_key = md5(((float)@date("YmdHis") + rand(100, 999)) . rand(1000, 9999));
        return $encrypt_key;
    }

    /**
     * 检测全局认证表单
     *
     * @params array $data 表单数据
     *
     * @return boolean
     *
     * */
    public function checkAuthConfig($data = "")
    {
        $auth_type = $data["auth"];
        $ldap_auth_types = array('1', '5', '8');
        $radius_auth_types = array('2', '6', '9');
        //获取服务器列表
        $ldap_server = array();
        $radius_server = array();
        //获取认证服务器
        $servers = Cavy::getModel("Server")->get_server_ids();
        foreach ($servers as $key => $item) {
            if ($item[1] == '0' || $item[1] == '1') { // AD/LDAP
                $ldap_server[] = $key;
            } else if ($item[1] == '2') { //RADIUS
                $radius_server[] = $key;
            } else {
                continue;
            }
        }
        if (in_array($auth_type, $ldap_auth_types)) {
            //获取选择的Ldap服务器
            $select_ldap = $data["server_id_ldap"];
            if (!$select_ldap) {
                return false;
            } else {
                foreach ($select_ldap as $item) {
                    if (!in_array($item, $ldap_server)) {
                        return false;
                    }
                }
            }
        } elseif (in_array($auth_type, $radius_auth_types)) {
            //获取选择的Radius服务器
            $select_radius = $data["server_id_radius"];
            if (!$select_radius) {
                return false;
            } else {
                foreach ($select_radius as $item) {
                    if (!in_array($item, $radius_server)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}

?>
