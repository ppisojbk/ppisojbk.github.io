<?php
require_once 'lib/Utils.php';
require_once 'lib/RpcService.php';

class License {
    public function License($filename)
    {
        $this->content = "";

        if (! file_exists($filename)) {
            return;
        }

        exec('/bin/super cert2xml ' . $filename, $out);
        $this->content = mb_convert_encoding(implode('', $out), 'utf-8',
                'utf-8, gb2312');
    }

    public function is_valid()
    {
        return True;
        if ($this->content == "") {
            return False;
        }

        try {
            $dom = new DOMDocument();
            if (! $dom->loadXML($this->content)) {
                return false;
            }

            $product = $dom->getElementsByTagName("product")->item(0)->getAttribute(
                    "type");
            if ($product != "ICEYE") {
                return false;
            }

            $type = $dom->getElementsByTagName("license")->item(0)->getAttribute(
                    "type");

            if ($type == "try") {
                $expiration = $dom->getElementsByTagName("expiration")->item(0);
                $begin = intval($expiration->getAttribute("begin"));
                $end = intval($expiration->getAttribute("end"));
                $now = intval(date("Ymd"));
                if ($now < $begin || $now > $end) {
                    return False;
                }
            }

            $hash1 = $dom->getElementsByTagName("hash")->item(0)->getAttribute(
                    "value");
            // $hash2 = exec('/bin/super bzygethash');
            $rpc = new RpcService('device_info'); // 调用后台py获取HASH
            $hash2 = $rpc->get_hash();

            if (strtoupper($hash1) != strtoupper($hash2)) {
                return False;
            }

            $config = $dom->getElementsByTagName("config")->item(0);
            $product = $config->getAttribute("model");

            if ($product != "sas h") {
                return false;
            }
        } catch (Exception $e) {
            return False;
        }

        return True;
    }

    public function is_valid_cloudlic() {
        return True;
        if ($this->content == "") {
            return False;
        }
        try {
            $dom = new DOMDocument();
            if (! $dom->loadXML($this->content)) {
                return false;
            }

            $product = $dom->getElementsByTagName("product")->item(0)->getAttribute(
                "type");
            if ($product != "ICEYE") {
                return false;
            }

            $type = $dom->getElementsByTagName("license")->item(0)->getAttribute(
                "type");

            if ($type == "try") {
                $expiration = $dom->getElementsByTagName("expiration")->item(0);
                $begin = intval($expiration->getAttribute("begin"));
                $end = intval($expiration->getAttribute("end"));
                $now = intval(date("Ymd"));
                if ($now < $begin || $now > $end) {
                    return False;
                }
            }

            $authType = $dom->getElementsByTagName("hash")->item(0)->getAttribute(
                "authType");
            if ($authType != "cloud") {
                return False;
            }

            $config = $dom->getElementsByTagName("config")->item(0);
            $product = $config->getAttribute("model");

            if ($product != "sas h") {
                return false;
            }
        } catch (Exception $e) {
            return False;
        }

        return True;
    }

    private function format_module($mod)
    {
        $mods = array ();

        if ($mod & 0x00001)
            $mods[] = _("入侵防护");
        if ($mod & 0x00002)
            $mods[] = "SSL VPN";
        if ($mod & 0x00004)
            $mods[] = "IPSEC VPN";
        if ($mod & 0x00010)
            $mods[] = _("状态防火墙");
        if ($mod & 0x00040)
            $mods[] = _("主动审计模块");
        if ($mod & 0x00100)
            $mods[] = _("防病毒(卡巴斯基)");
        if ($mod & 0x00200)
            $mods[] = _("防病毒(绿盟)");
        if ($mod & 0x00400)
            $mods[] = _("流量管理模块");
        if ($mod & 0x00800)
            $mods[] = _("入侵检测");
        if ($mod & 0x01000)
            $mods[] = _("WEB安全模块");
        if ($mod & 0x04000)
            $mods[] = _("内容安全");
        if ($mod & 0x08000)
            $mods[] = _("反垃圾邮件模块");
        if ($mod & 0x10000)
            $mods[] = _("网络审计");
        if ($mod & 0x20000)
            $mods[] = _("IM/P2P");

        return implode($mods, "+");
    }

    private function format_module_1(){
        $mods[] = _("入侵防护");
        $mods[] = "SSL VPN";
        $mods[] = "IPSEC VPN";
        $mods[] = _("状态防火墙");
        $mods[] = _("主动审计模块");
        $mods[] = _("防病毒(卡巴斯基)");
        $mods[] = _("防病毒(绿盟)");
        $mods[] = _("流量管理模块");
        $mods[] = _("入侵检测");
        $mods[] = _("WEB安全模块");
        $mods[] = _("内容安全");
        $mods[] = _("反垃圾邮件模块");
        $mods[] = _("网络审计");
        $mods[] = _("IM/P2P");
        return implode($mods, "+");
    }

    public function info()
    {
        //公有云平台列表
        $cloudMap=array(
            "none"=>"无",
            "aws"=>"亚马逊",
            "azure"=>"微软云",
            "aliyun"=>"阿里云",
            "tencentcloud"=>"腾讯云",
            "qingcloud"=>"青云"
        );
        
        $lic["type"] = _("正式证书");
        $lic["sms_use"] = _("否");
        $lic["public_cloud"] = "aliyun";
        $lic["product"] = "SAS[H]";
        $lic["nic"] = _("不限");
        $lic["module"] =format_module_1();
        $lic["mod"] = "test";
        $lic["status"] = _("正常");
        $lic["update"] = True;
        $lic["user"] = "adm";
        $lic["config_user"] = "adm";
        $lic["config_server"] = "test";
        $rpc = new RpcService('device_info');
        $lic["hash2"] = $rpc->get_hash();
        $lic["hash1"] = $lic["hash2"];
        $lic["time1"] = "2011-02-22";
        $lic["time2"] = "2099-03-33";
        return $lic;
        

        if ($this->content == "") {
            $lic["type"] = _("错误证书");
        } else {
            $dom = new DOMDocument();
            if (! $dom->loadXML($this->content)) {
                $lic["type"] = _("错误证书");
                return $lic;
            }

            $type = $dom->getElementsByTagName("license")->item(0)->getAttribute(
                    "type");

            if ($type == "try") {
                $lic["type"] = _("试用证书");
            } else {
                $lic["type"] = _("正式证书");
            }
            //读取短信包月信息
            //有可能xml结点不存在 需要进行兼容处理
            $sms_info_node = $dom->getElementsByTagName("nscloudsms")->item(0);
            if ($sms_info_node && $sms_info_node->getAttribute("isuse") == "true") {
                $lic["sms_use"] = _("是");
                $lic["sms_num"] = $sms_info_node->getAttribute("value");
            } else {
                $lic["sms_use"] = _("否");
                $lic["sms_num"] = 0;
            }
            //读取公有云平台
            //有可能xml结点不存在 需要进行兼容处理
            $public_cloud_node=$dom->getElementsByTagName("publiccloud")->item(0);
            if ($public_cloud_node) {
                $public_cloud = $public_cloud_node->getAttribute("type");
                $lic["public_cloud"] = $public_cloud;
            } else {
                $lic["public_cloud"] = "none";
            }
            $config = $dom->getElementsByTagName("config")->item(0);
            $product = $dom->getElementsByTagName("product")->item(0);

            $lic["product"] = $config->getAttribute("model") == "sas h" ? "SAS[H]" : $config->getAttribute(
                    "model");
            if (strtoupper($product->getAttribute("mode")) == "OSMS") {
                $lic["product"] = 'OSMS';
            }

            $lic["module"] = $this->format_module(
                    $config->getAttribute("module"));
            $lic["mod"] = $config->getAttribute("mode");
            $lic["nic"] = $config->getAttribute("nic");

            if ($lic["nic"] == "0") {
                $lic["nic"] = _("不限");
            }

            $lic["user"] = $dom->getElementsByTagName("user")->item(0)->getAttribute(
                    "name");
            $lic["config_user"] = $config->getAttribute("user");
            $lic["config_server"] = $config->getAttribute("server");
            $expiration = $dom->getElementsByTagName("expiration")->item(0);
            $time1 = $expiration->getAttribute("begin");
            $time2 = $expiration->getAttribute("end");
            $now = intval(date("Ymd"));
            $info["update"] = True;

            if ($now < intval($time1) || $now > intval($time2)) {
                $lic["status"] = _("过期");
                $lic["update"] = False;
            } else {
                $lic["status"] = _("正常");
                $lic["update"] = True;
            }

            $lic["time1"] = substr($time1, 0, 4) . "-" . substr($time1, 4, 2) .
                     "-" . substr($time1, 6, 2);
            $lic["time2"] = substr($time2, 0, 4) . "-" . substr($time2, 4, 2) .
                     "-" . substr($time2, 6, 2);
            $lic["hash1"] = $dom->getElementsByTagName("hash")->item(0)->getAttribute(
                    "value");
            $rpc = new RpcService('device_info'); // 调用后台py获取HASH
            $lic["hash2"] = $rpc->get_hash();
        }

        return $lic;
    }

    public function apply()
    {
        if (! $this->is_valid()) {
            return;
        }

        $dom = new DOMDocument();
        $dom->loadXML($this->content);
        $product = $dom->getElementsByTagName("config")->item(0)->getAttribute(
                "model");
        $lang = $dom->getElementsByTagName("config")->item(0)->getAttribute(
                "language");

        if ($product == "ips") {
            $product = "nips";
        }
        if ($product == "ids") {
            $product = "nids";
        }

        system("/bin/super bzychmod 0666 /opt/nsfocus/etc/product");
        system("echo " . $product . " > /opt/nsfocus/etc/product");
        system("/bin/super bzyecho " . $lang . " > /opt/nsfocus/etc/language");

        if (!file_exists("/opt/nsfocus/etc/language")) {
            system("echo " . $lang . " > /opt/nsfocus/etc/language");
        }
    }

    public function module()
    {
        if (! $this->is_valid()) {
            return "";
        }

        $dom = new DOMDocument();
        $dom->loadXML($this->content);
        $config = $dom->getElementsByTagName("config")->item(0);

        return $config->getAttribute("module");
    }

    /**
     * 获取系统证书文件DOM节点
     *
     * @return object DOM对象
     */
    private function loadLicense()
    {
        $dom = new DOMDocument();
        if ($this->content == "") {
            return;
        }
        $dom->loadXML($this->content);

        return $dom;
    }

    /**
     * 校验系统证书是否过期
     *
     * @return boolean
     */
    public function isLicenseValid()
    {
        $dom = $this->loadLicense();
        $type = $dom->getElementsByTagName("license")->item(0)->getAttribute(
                "type");
        $expiration = $dom->getElementsByTagName("expiration")->item(0);
        $time1 = $expiration->getAttribute("begin");
        $time2 = $expiration->getAttribute("end");
        $now = intval(date("Ymd"));

        if ($now >= intval($time1) && $now <= intval($time2)) {
            return true;
        }

        return false;
    }

    /**
     * 获取系统证书资质类型：SASH|OSMS|SEC
     *
     * @return string 证书资质类型
     */
    public function getLicType()
    {
        $dom = $this->loadLicense();
        $mode = "SASH";
        if ($dom) {
            $mode = $dom->getElementsByTagName("product")->item(0)->getAttribute("mode");
            if (!$mode) {
                $mode = "SASH";
            }
        }

        return $mode;
    }

    /**
     * 构造菜单项-已废弃
     *
     * @return array
     */
    private function sub_menu($name, $item)
    {
        if (count($item) == 0)
            return "";

        $r = "{name:'" . $name . "',close:true,data:[";

        foreach ($item as $k => $v) {
            if ($k == _('全局统计')) {
                $r .= "['$k','$v', 'aline-split'],"; // 在全局统计后面加一个分隔符
            } else {
                $r .= "['$k','$v'],";
            }
        }

        $r = rtrim($r, ",") . "]}";

        return $r;
    }

    public function menu()
    {
        if (! $this->is_valid()) {
            return "";
        }

        $dom = new DOMDocument();
        $dom->loadXML($this->content);

        $type = $dom->getElementsByTagName("license")->item(0)->getAttribute(
                "type");
        $expiration = $dom->getElementsByTagName("expiration")->item(0);
        $time1 = $expiration->getAttribute("begin");
        $time2 = $expiration->getAttribute("end");
        $now = intval(date("Ymd"));

        $config = $dom->getElementsByTagName("config")->item(0);
        $model = $config->getAttribute("model");
        $mode = $config->getAttribute("mode");
        $mod = $config->getAttribute("module");

        $usr_role = $_SESSION['login.user']['roles'][0];

        // 首页
        $item = array ();
        if ($usr_role == 'admin') {
            $item[_('运维概要')] = '/index/tabs/cat/operate/mod/outline';
            $item[_('状态')] = '/index/tabs/cat/home/mod/status';
            $item[_('帐号解锁')] = '/index/tabs/cat/home/mod/user';
        } elseif ($usr_role == 'audit' || $usr_role == 'auditors') {
            if ($usr_role == 'audit') {
                $item[_('审计概要')] = '/index/tabs/cat/operate/mod/outline';
                $item[_('状态')] = '/index/tabs/cat/home/mod/status';
            }
            $item[_('在线会话')] = '/index/tabs/cat/home/mod/online';
            if ($usr_role == 'audit') {
                $item[_('帐号解锁')] = '/index/tabs/cat/home/mod/user';
            }
        } elseif ($usr_role == 'manager') {
            $item[_('设备访问')] = '/access/index';
            // $item[_('设备访问')] = '/index/tabs/cat/home/mod/device';
            $item[_('主帐号')] = '/index/tabs/cat/home/mod/user';
            $item[_('在线会话')] = '/index/tabs/cat/home/mod/online';
        } else {
            $item[_('设备访问')] = '/access/index';
            // $item[_('设备访问')] = '/index/tabs/cat/home/mod/device';
        }
        if (in_array($usr_role,
                array (
                        'manager',
                        'user'
                ))) {
            $item[_('授权管理')] = '/index/tabs/cat/home/mod/authorize';
        }
        $item[_('消息通知')] = '/index/tabs/cat/message/mod/index';
        if (in_array($usr_role,
                array (
                        'manager',
                        'user'
                ))) {
            $item[_('个性化')] = '/personal/index';
        }
        $r = $this->sub_menu(_('首页'), $item);
        if ($r != "") {
            $sub[] = $r;
        }

        // 向导
        $item = array ();
        $isAtom = Utils::isAtom(); // atom判断
        if ($usr_role == 'admin' && ! $isAtom) {
            $item[_('应用平台配置')] = '/index/tabs/cat/configguide/mod/appPlatform';
        } elseif ($usr_role == 'manager') {
            $item[_('数据库配置')] = '/index/tabs/cat/configguide/mod/db';
            $item[_('访问策略配置')] = '/index/tabs/cat/configguide/mod/acp';
            $item[_('报表计划配置')] = '/index/tabs/cat/configguide/mod/reportPlan';
        } elseif (in_array($usr_role,
                array (
                        'audit',
                        'auditors'
                ))) {
            $item[_('报表计划配置')] = '/index/tabs/cat/configguide/mod/reportPlan';
        }
        $r = $this->sub_menu(_('向导'), $item);
        if ($r != "") {
            $sub[] = $r;
        }

        // 系统
        $item = array ();
        if (in_array($usr_role,
                array (
                        'admin',
                        'audit'
                ))) {
            $item[_('系统配置')] = '/index/tabs/cat/system/mod/setting';
        }
        if (in_array($usr_role, array (
                'audit'
        ))) {
            $item[_('日志管理')] = '/index/tabs/cat/system/mod/log';
        }
        if (in_array($usr_role, array (
                'admin'
        ))) {
            $item[_('系统控制')] = '/index/tabs/cat/system/mod/devctrl';
        }
        // @todo
        if (in_array($usr_role,
                array (
                        'admin',
                        'audit'
                ))) {
            $item[_('告警管理')] = '/index/tabs/cat/system/mod/alarm';
        }
        if ($usr_role == 'admin') {
            if ($now >= intval($time1) && $now <= intval($time2)) {
                $item[_('系统升级')] = '/index/tabs/cat/system/mod/update';
            }
        }
        if (in_array($usr_role, array (
                'admin'
        ))) {
            $item[_('备份恢复')] = '/index/tabs/cat/system/mod/backup';
        }
        if (in_array($usr_role, array (
                'admin'
        )) && ! $isAtom) {
            $item[_('应用平台')] = '/index/tabs/cat/system/mod/app';
        }
        if (in_array($usr_role, array (
                'manager'
        ))) {
            $item[_('设备运维配置')] = 'index/tabs/cat/system/mod/autologin';
            $item[_('设备密码管理')] = '/index/tabs/cat/system/mod/devpass';
            $item[_('运维备注')] = 'index/tabs/cat/system/mod/accesscomment';
        }
        if ($usr_role == 'admin') {
            $item[_('证书管理')] = '/index/tabs/cat/system/mod/license';
        }

        if (in_array($usr_role,
                array (
                        'admin',
                        'manager',
                        'audit'
                ))) {
            $item[_('诊断工具')] = '/index/tabs/cat/system/mod/tools';
        }
        if (in_array($usr_role,
                array (
                        'admin',
                        'manager'
                ))) {
            $item[_('工具下载')] = '/index/tabs/cat/system/mod/certificate/';
        }
        if (in_array($usr_role,
                array (
                        'manager',
                        'audit',
                        'auditors',
                        'user'
                ))) {
            $item[_('工具下载')] = '/index/tabs/cat/system/mod/download';
        }
        $r = $this->sub_menu(_('系统'), $item);
        if ($r != "") {
            $sub[] = $r;
        }

        // 网络
        $item = array ();
        if (in_array($usr_role, array (
                'admin'
        ))) {
            $item[_('接口配置')] = '/index/tabs/cat/network/mod/interface';
            $item[_('DNS配置')] = '/index/tabs/cat/network/mod/dns';
            $item[_('路由配置')] = '/index/tabs/cat/network/mod/route';
            $item[_('双机热备')] = '/index/tabs/cat/network/mod/ha';
            if ($mode != "monitor") {
                $item[_('IPMAC绑定')] = '/index/tabs/cat/network/mod/ipmac';
                $item[_('路由')] = '/index/tabs/cat/network/mod/route';
                $item[_('DHCP')] = '/index/tabs/cat/network/mod/dhcp';
            }
            if ($mode != "monitor") {
                $item[_('高可用性设置')] = '/index/tabs/cat/network/mod/ha';
                $item[_('外置Bypass')] = '/index/tabs/cat/network/mod/bypass';
            }
        }

        $r = $this->sub_menu(_('网络'), $item);
        if ($r != "") {
            $sub[] = $r;
        }

        // 策略
        $item = array ();
        if ($usr_role == 'manager') {
            $item[_('访问策略')] = '/index/tabs/cat/policy/mod/access';
        }
        if (in_array($usr_role,
                array (
                        'manager',
                        'user'
                ))) {
            $item[_('工单审批')] = '/index/tabs/cat/workorder/mod/approve';
        }
        if ($usr_role == 'manager') {
            $item[_('权限视图')] = '/index/tabs/cat/policy/mod/exportAccess';
        }
        $r = $this->sub_menu(_('权限'), $item);

        if ($r != "") {
            $sub[] = $r;
        }

        // 对象
        $item = array ();
        if (in_array($usr_role, array (
                'user'
        ))) {
            $item[_('用户')] = '/index/tabs/cat/object/mod/user';
            $item[_('设备')] = '/index/tabs/cat/object/mod/device';
        }

        if (in_array($usr_role,
                array (
                        'admin',
                        'manager',
                        'audit',
                        'auditors'
                ))) {
            $item[_('用户')] = '/index/tabs/cat/object/mod/user';
            $item[_('设备')] = '/index/tabs/cat/object/mod/device';
        }

        if (in_array($usr_role, array (
                'admin'
        ))) {
            $item[_('策略')] = '/index/tabs/cat/object/mod/acp';
            $item[_('密码')] = '/index/tabs/cat/object/mod/passpolicy';
        }

        if (in_array($usr_role, array (
                'manager'
        ))) {
            $item[_('网络')] = '/index/tabs/cat/object/mod/network';
            $item[_('命令')] = '/index/tabs/cat/object/mod/command';
            $item[_('时间')] = '/index/tabs/cat/object/mod/time';
            $item[_('密码')] = '/index/tabs/cat/object/mod/passpolicy';
            $item[_('前置机')] = '/index/tabs/cat/object/mod/app';
            $item[_('业务类型')] = '/index/tabs/cat/object/mod/servicetype';
        } elseif ($usr_role != 'user') {
            $item[_('时间')] = '/index/tabs/cat/object/mod/time';
        }

        $r = $this->sub_menu(_('对象'), $item);
        if ($r != "") {
            $sub[] = $r;
        }

        // 日志分析
        $item = array ();
        if (in_array($usr_role,
                array (
                        'manager',
                        'audit',
                        'auditors'
                ))) {
            $item[_('字符审计')] = '/index/tabs/cat/analyze/mod/text';
            $item[_('图形审计')] = '/index/tabs/cat/analyze/mod/graph';
            $item[_('文件审计')] = '/index/tabs/cat/analyze/mod/file';
            $item[_('网页审计')] = '/index/tabs/cat/analyze/mod/web';
            $item[_('数据库审计')] = '/index/tabs/cat/analyze/mod/database';
            $item[_('授权审计')] = '/index/tabs/cat/analyze/mod/authorization';
        }
        if ($usr_role == 'audit') {
            $item[_('系统日志')] = '/index/tabs/cat/analyze/mod/sa';
        }
        $r = $this->sub_menu(_('日志分析'), $item);
        if ($r != "") {
            $sub[] = $r;
        }

        // 报表统计
        $item = array ();
        if (in_array($usr_role,
                array (
                        'manager',
                        'audit',
                        'auditors'
                ))) {
            $item[_('报表生成')] = '/index/tabs/cat/report/mod/audit';
            $item[_('报表计划')] = '/index/tabs/cat/report/mod/plan';
        }

        $r = $this->sub_menu(_('统计报表'), $item);
        if ($r != "") {
            $sub[] = $r;
        }

        if ($usr_role == 'admin' || $usr_role == 'audit' ||
                 $usr_role == 'auditors') {
            $pass = '';
            return "{name:'" . strtoupper($model) .
                     "',url:'/index/tabs/cat/home/mod/status',data:[" .
                     implode($sub, ",") . "]}";
        } else {
            return "{name:'" . strtoupper($model) .
                     "',url:'/index/tabs/cat/home/mod/device',data:[" .
                     implode($sub, ",") . "]}";
        }
    }
}
?>

